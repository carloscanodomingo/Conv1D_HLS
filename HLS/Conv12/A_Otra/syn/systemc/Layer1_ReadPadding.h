// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Layer1_ReadPadding_HH_
#define _Layer1_ReadPadding_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Layer1_ReadPadding : public sc_module {
    // Port declarations 46
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<16> > src_V_address0;
    sc_out< sc_logic > src_V_ce0;
    sc_in< sc_lv<18> > src_V_q0;
    sc_in< sc_lv<8> > src_V_offset_dout;
    sc_in< sc_logic > src_V_offset_empty_n;
    sc_out< sc_logic > src_V_offset_read;
    sc_out< sc_lv<18> > dst_0_V_V_din;
    sc_in< sc_logic > dst_0_V_V_full_n;
    sc_out< sc_logic > dst_0_V_V_write;
    sc_out< sc_lv<18> > dst_1_V_V_din;
    sc_in< sc_logic > dst_1_V_V_full_n;
    sc_out< sc_logic > dst_1_V_V_write;
    sc_out< sc_lv<18> > dst_2_V_V_din;
    sc_in< sc_logic > dst_2_V_V_full_n;
    sc_out< sc_logic > dst_2_V_V_write;
    sc_out< sc_lv<18> > dst_3_V_V_din;
    sc_in< sc_logic > dst_3_V_V_full_n;
    sc_out< sc_logic > dst_3_V_V_write;
    sc_out< sc_lv<18> > dst_4_V_V_din;
    sc_in< sc_logic > dst_4_V_V_full_n;
    sc_out< sc_logic > dst_4_V_V_write;
    sc_out< sc_lv<18> > dst_5_V_V_din;
    sc_in< sc_logic > dst_5_V_V_full_n;
    sc_out< sc_logic > dst_5_V_V_write;
    sc_out< sc_lv<18> > dst_6_V_V_din;
    sc_in< sc_logic > dst_6_V_V_full_n;
    sc_out< sc_logic > dst_6_V_V_write;
    sc_out< sc_lv<18> > dst_7_V_V_din;
    sc_in< sc_logic > dst_7_V_V_full_n;
    sc_out< sc_logic > dst_7_V_V_write;
    sc_out< sc_lv<18> > dst_8_V_V_din;
    sc_in< sc_logic > dst_8_V_V_full_n;
    sc_out< sc_logic > dst_8_V_V_write;
    sc_out< sc_lv<18> > dst_9_V_V_din;
    sc_in< sc_logic > dst_9_V_V_full_n;
    sc_out< sc_logic > dst_9_V_V_write;
    sc_out< sc_lv<8> > src_V_offset_out_din;
    sc_in< sc_logic > src_V_offset_out_full_n;
    sc_out< sc_logic > src_V_offset_out_write;


    // Module declarations
    Layer1_ReadPadding(sc_module_name name);
    SC_HAS_PROCESS(Layer1_ReadPadding);

    ~Layer1_ReadPadding();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > src_V_offset_blk_n;
    sc_signal< sc_logic > dst_0_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > exitcond9_i_fu_275_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond1_i_reg_339;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<1> > exitcond3_i_fu_313_p2;
    sc_signal< sc_logic > dst_1_V_V_blk_n;
    sc_signal< sc_logic > dst_2_V_V_blk_n;
    sc_signal< sc_logic > dst_3_V_V_blk_n;
    sc_signal< sc_logic > dst_4_V_V_blk_n;
    sc_signal< sc_logic > dst_5_V_V_blk_n;
    sc_signal< sc_logic > dst_6_V_V_blk_n;
    sc_signal< sc_logic > dst_7_V_V_blk_n;
    sc_signal< sc_logic > dst_8_V_V_blk_n;
    sc_signal< sc_logic > dst_9_V_V_blk_n;
    sc_signal< sc_logic > src_V_offset_out_blk_n;
    sc_signal< sc_lv<8> > col1_i_reg_223;
    sc_signal< sc_lv<17> > tmp_51_fu_269_p2;
    sc_signal< sc_lv<17> > tmp_51_reg_325;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<4> > col_fu_281_p2;
    sc_signal< sc_lv<1> > exitcond1_i_fu_287_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<8> > col_2_fu_293_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<4> > col_3_fu_319_p2;
    sc_signal< bool > ap_block_state6;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_lv<4> > col_i_reg_212;
    sc_signal< sc_lv<4> > col3_i_reg_234;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<64> > tmp_61_cast_fu_308_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<16> > tmp_fu_245_p3;
    sc_signal< sc_lv<14> > tmp_s_fu_257_p3;
    sc_signal< sc_lv<17> > p_shl_cast_fu_253_p1;
    sc_signal< sc_lv<17> > p_shl1_cast_fu_265_p1;
    sc_signal< sc_lv<17> > tmp_i_cast_fu_299_p1;
    sc_signal< sc_lv<17> > tmp_52_fu_303_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_pp0_stage0;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<5> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<18> ap_const_lv18_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<4> ap_const_lv4_9;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<8> ap_const_lv8_C0;
    static const sc_lv<8> ap_const_lv8_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state6();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_col_2_fu_293_p2();
    void thread_col_3_fu_319_p2();
    void thread_col_fu_281_p2();
    void thread_dst_0_V_V_blk_n();
    void thread_dst_0_V_V_din();
    void thread_dst_0_V_V_write();
    void thread_dst_1_V_V_blk_n();
    void thread_dst_1_V_V_din();
    void thread_dst_1_V_V_write();
    void thread_dst_2_V_V_blk_n();
    void thread_dst_2_V_V_din();
    void thread_dst_2_V_V_write();
    void thread_dst_3_V_V_blk_n();
    void thread_dst_3_V_V_din();
    void thread_dst_3_V_V_write();
    void thread_dst_4_V_V_blk_n();
    void thread_dst_4_V_V_din();
    void thread_dst_4_V_V_write();
    void thread_dst_5_V_V_blk_n();
    void thread_dst_5_V_V_din();
    void thread_dst_5_V_V_write();
    void thread_dst_6_V_V_blk_n();
    void thread_dst_6_V_V_din();
    void thread_dst_6_V_V_write();
    void thread_dst_7_V_V_blk_n();
    void thread_dst_7_V_V_din();
    void thread_dst_7_V_V_write();
    void thread_dst_8_V_V_blk_n();
    void thread_dst_8_V_V_din();
    void thread_dst_8_V_V_write();
    void thread_dst_9_V_V_blk_n();
    void thread_dst_9_V_V_din();
    void thread_dst_9_V_V_write();
    void thread_exitcond1_i_fu_287_p2();
    void thread_exitcond3_i_fu_313_p2();
    void thread_exitcond9_i_fu_275_p2();
    void thread_p_shl1_cast_fu_265_p1();
    void thread_p_shl_cast_fu_253_p1();
    void thread_src_V_address0();
    void thread_src_V_ce0();
    void thread_src_V_offset_blk_n();
    void thread_src_V_offset_out_blk_n();
    void thread_src_V_offset_out_din();
    void thread_src_V_offset_out_write();
    void thread_src_V_offset_read();
    void thread_tmp_51_fu_269_p2();
    void thread_tmp_52_fu_303_p2();
    void thread_tmp_61_cast_fu_308_p1();
    void thread_tmp_fu_245_p3();
    void thread_tmp_i_cast_fu_299_p1();
    void thread_tmp_s_fu_257_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
