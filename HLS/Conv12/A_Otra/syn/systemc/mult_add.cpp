// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mult_add.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mult_add::ap_const_logic_1 = sc_dt::Log_1;
const bool mult_add::ap_const_boolean_1 = true;
const sc_lv<10> mult_add::ap_const_lv10_0 = "0000000000";
const sc_lv<32> mult_add::ap_const_lv32_A = "1010";
const sc_lv<32> mult_add::ap_const_lv32_1B = "11011";
const sc_logic mult_add::ap_const_logic_0 = sc_dt::Log_0;

mult_add::mult_add(sc_module_name name) : sc_module(name), mVcdFile(0) {
    MASTER_CNN_mac_mubkb_U18 = new MASTER_CNN_mac_mubkb<1,1,18,18,28,28>("MASTER_CNN_mac_mubkb_U18");
    MASTER_CNN_mac_mubkb_U18->din0(in_V);
    MASTER_CNN_mac_mubkb_U18->din1(weight_V);
    MASTER_CNN_mac_mubkb_U18->din2(grp_fu_71_p2);
    MASTER_CNN_mac_mubkb_U18->dout(grp_fu_71_p3);

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( grp_fu_71_p3 );

    SC_METHOD(thread_grp_fu_71_p2);
    sensitive << ( add_V );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mult_add_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_V, "(port)in_V");
    sc_trace(mVcdFile, weight_V, "(port)weight_V");
    sc_trace(mVcdFile, add_V, "(port)add_V");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, grp_fu_71_p3, "grp_fu_71_p3");
    sc_trace(mVcdFile, grp_fu_71_p2, "grp_fu_71_p2");
#endif

    }
}

mult_add::~mult_add() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete MASTER_CNN_mac_mubkb_U18;
}

void mult_add::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void mult_add::thread_ap_return() {
    ap_return = grp_fu_71_p3.read().range(27, 10);
}

void mult_add::thread_grp_fu_71_p2() {
    grp_fu_71_p2 = esl_concat<18,10>(add_V.read(), ap_const_lv10_0);
}

}

