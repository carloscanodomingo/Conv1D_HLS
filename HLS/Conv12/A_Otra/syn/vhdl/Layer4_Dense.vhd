-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Layer4_Dense is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    src_V_ce0 : OUT STD_LOGIC;
    src_V_q0 : IN STD_LOGIC_VECTOR (16 downto 0);
    weight_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    weight_V_EN_A : OUT STD_LOGIC;
    weight_V_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    weight_V_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    weight_V_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    Bias_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bias_V_EN_A : OUT STD_LOGIC;
    Bias_V_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    Bias_V_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bias_V_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    dst_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    dst_V_ce0 : OUT STD_LOGIC;
    dst_V_we0 : OUT STD_LOGIC;
    dst_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dst_V_offset_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    dst_V_offset_empty_n : IN STD_LOGIC;
    dst_V_offset_read : OUT STD_LOGIC );
end;


architecture behav of Layer4_Dense is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (84 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (84 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (84 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (84 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (84 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (84 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (84 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (84 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (84 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (84 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv16_100 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dst_V_offset_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sum_V_2_i_reg_247 : STD_LOGIC_VECTOR (17 downto 0);
    signal sum_V_1_i_reg_257 : STD_LOGIC_VECTOR (17 downto 0);
    signal sum_V_0_i_reg_267 : STD_LOGIC_VECTOR (17 downto 0);
    signal j_i_reg_277 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_362 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state6_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal exitcond3_i_reg_964 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state7_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal sum_0_V_reg_924 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sum_1_V_reg_934 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal dst_V_addr_reg_944 : STD_LOGIC_VECTOR (9 downto 0);
    signal dst_V_addr_1_reg_949 : STD_LOGIC_VECTOR (9 downto 0);
    signal dst_V_addr_2_reg_954 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond3_i_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond3_i_reg_964 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_421_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_968 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_22_fu_448_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_22_reg_973 : STD_LOGIC_VECTOR (8 downto 0);
    signal src_V_load_reg_994 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_48_i_fu_469_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_48_i_reg_999 : STD_LOGIC_VECTOR (27 downto 0);
    signal OP1_V_i_cast_fu_487_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal OP1_V_i_cast_reg_1009 : STD_LOGIC_VECTOR (34 downto 0);
    signal p_Val2_40_i_fu_903_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal p_Val2_40_i_reg_1015 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_48_1_i_fu_494_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_48_1_i_reg_1020 : STD_LOGIC_VECTOR (27 downto 0);
    signal sum_0_V_1_reg_1025 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_40_1_i_fu_909_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal p_Val2_40_1_i_reg_1030 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_48_2_i_fu_528_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_48_2_i_reg_1035 : STD_LOGIC_VECTOR (27 downto 0);
    signal sum_1_V_1_reg_1040 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_40_2_i_fu_914_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal p_Val2_40_2_i_reg_1045 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_exp_24_16_s_fu_335_ap_return : STD_LOGIC_VECTOR (23 downto 0);
    signal Exp_Out_0_V_reg_1055 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_exp_24_16_s_fu_344_ap_return : STD_LOGIC_VECTOR (23 downto 0);
    signal Exp_Out_1_V_reg_1061 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_exp_24_16_s_fu_353_ap_return : STD_LOGIC_VECTOR (23 downto 0);
    signal Exp_Out_2_V_reg_1067 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_fu_815_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal Sum_Exp_V_fu_830_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal exitcond6_i_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_i_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_i_reg_1086 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_60_i_fu_849_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_fu_877_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal grp_exp_24_16_s_fu_335_ap_start : STD_LOGIC;
    signal grp_exp_24_16_s_fu_335_ap_done : STD_LOGIC;
    signal grp_exp_24_16_s_fu_335_ap_idle : STD_LOGIC;
    signal grp_exp_24_16_s_fu_335_ap_ready : STD_LOGIC;
    signal grp_exp_24_16_s_fu_335_x_V : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_exp_24_16_s_fu_344_ap_start : STD_LOGIC;
    signal grp_exp_24_16_s_fu_344_ap_done : STD_LOGIC;
    signal grp_exp_24_16_s_fu_344_ap_idle : STD_LOGIC;
    signal grp_exp_24_16_s_fu_344_ap_ready : STD_LOGIC;
    signal grp_exp_24_16_s_fu_344_x_V : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_exp_24_16_s_fu_353_ap_start : STD_LOGIC;
    signal grp_exp_24_16_s_fu_353_ap_done : STD_LOGIC;
    signal grp_exp_24_16_s_fu_353_ap_idle : STD_LOGIC;
    signal grp_exp_24_16_s_fu_353_ap_ready : STD_LOGIC;
    signal grp_exp_24_16_s_fu_353_x_V : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_phi_mux_sum_V_1_i_phi_fu_260_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_phi_mux_sum_V_0_i_phi_fu_270_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_phi_mux_j_i_phi_fu_281_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_Val2_s_reg_288 : STD_LOGIC_VECTOR (23 downto 0);
    signal i5_i_reg_300 : STD_LOGIC_VECTOR (1 downto 0);
    signal storemerge1_reg_311 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_fu_898_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_storemerge2_phi_fu_327_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal storemerge2_reg_323 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_reg_grp_exp_24_16_s_fu_335_ap_start : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (84 downto 0);
    signal ap_NS_fsm_state11 : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_reg_grp_exp_24_16_s_fu_344_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_exp_24_16_s_fu_353_ap_start : STD_LOGIC := '0';
    signal tmp_8_cast_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_cast_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_cast_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_cast_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_cast_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_cast_fu_482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal Bias_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_872_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_370_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_378_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal dst_V_offset_cast_i_s_fu_366_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_fu_382_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_fu_393_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_404_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_21_fu_436_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_cast_fu_444_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_cast_fu_432_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_23_fu_459_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_24_fu_477_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_48_cast2_i_cast_fu_505_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_465_i_cast_fu_502_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_Val2_42_i_fu_508_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_48_1_cast4_i_cas_fu_539_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_465_1_i_cast_fu_536_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_Val2_42_1_i_fu_542_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_48_2_cast6_i_cas_fu_565_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_465_2_i_cast_fu_562_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_Val2_42_2_i_fu_568_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_40_tr_i_fu_584_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_neg_i_fu_596_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_1_fu_602_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_lshr_cast_i_fu_612_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_622_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_fu_632_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_neg_t_i_fu_616_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_33_fu_588_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_640_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_4_fu_636_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_40_tr_1_i_fu_659_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_neg_1_i_fu_671_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_7_fu_677_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_lshr_1_cast_i_fu_687_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_697_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_11_fu_707_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_neg_t_1_i_fu_691_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_34_fu_663_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_715_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_12_fu_711_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_40_tr_2_i_fu_734_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_neg_2_i_fu_746_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_15_fu_752_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_lshr_2_cast_i_fu_762_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_fu_772_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_17_fu_782_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_neg_t_2_i_fu_766_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_fu_738_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_790_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_18_fu_786_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_11_fu_821_p5 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_853_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_853_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_866_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_866_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_853_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_866_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_892_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_892_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_40_i_fu_903_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_40_1_i_fu_909_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_40_2_i_fu_914_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_853_ap_start : STD_LOGIC;
    signal grp_fu_853_ap_done : STD_LOGIC;
    signal grp_fu_866_ap_start : STD_LOGIC;
    signal grp_fu_866_ap_done : STD_LOGIC;
    signal grp_fu_892_ap_start : STD_LOGIC;
    signal grp_fu_892_ap_done : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal p_Val2_40_i_fu_903_p00 : STD_LOGIC_VECTOR (34 downto 0);

    component exp_24_16_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_V : IN STD_LOGIC_VECTOR (13 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component MASTER_CNN_mux_32g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component MASTER_CNN_sdiv_3hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component MASTER_CNN_mul_muibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;



begin
    grp_exp_24_16_s_fu_335 : component exp_24_16_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_exp_24_16_s_fu_335_ap_start,
        ap_done => grp_exp_24_16_s_fu_335_ap_done,
        ap_idle => grp_exp_24_16_s_fu_335_ap_idle,
        ap_ready => grp_exp_24_16_s_fu_335_ap_ready,
        x_V => grp_exp_24_16_s_fu_335_x_V,
        ap_return => grp_exp_24_16_s_fu_335_ap_return);

    grp_exp_24_16_s_fu_344 : component exp_24_16_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_exp_24_16_s_fu_344_ap_start,
        ap_done => grp_exp_24_16_s_fu_344_ap_done,
        ap_idle => grp_exp_24_16_s_fu_344_ap_idle,
        ap_ready => grp_exp_24_16_s_fu_344_ap_ready,
        x_V => grp_exp_24_16_s_fu_344_x_V,
        ap_return => grp_exp_24_16_s_fu_344_ap_return);

    grp_exp_24_16_s_fu_353 : component exp_24_16_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_exp_24_16_s_fu_353_ap_start,
        ap_done => grp_exp_24_16_s_fu_353_ap_done,
        ap_idle => grp_exp_24_16_s_fu_353_ap_idle,
        ap_ready => grp_exp_24_16_s_fu_353_ap_ready,
        x_V => grp_exp_24_16_s_fu_353_x_V,
        ap_return => grp_exp_24_16_s_fu_353_ap_return);

    MASTER_CNN_mux_32g8j_U609 : component MASTER_CNN_mux_32g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 2,
        dout_WIDTH => 24)
    port map (
        din0 => Exp_Out_0_V_reg_1055,
        din1 => Exp_Out_1_V_reg_1061,
        din2 => Exp_Out_2_V_reg_1067,
        din3 => i5_i_reg_300,
        dout => p_Val2_11_fu_821_p5);

    MASTER_CNN_sdiv_3hbi_U610 : component MASTER_CNN_sdiv_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 24,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_853_ap_start,
        done => grp_fu_853_ap_done,
        din0 => grp_fu_853_p0,
        din1 => grp_fu_853_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_853_p2);

    MASTER_CNN_sdiv_3hbi_U611 : component MASTER_CNN_sdiv_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 24,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_866_ap_start,
        done => grp_fu_866_ap_done,
        din0 => grp_fu_866_p0,
        din1 => grp_fu_866_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_866_p2);

    MASTER_CNN_sdiv_3hbi_U612 : component MASTER_CNN_sdiv_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 24,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_892_ap_start,
        done => grp_fu_892_ap_done,
        din0 => grp_fu_892_p0,
        din1 => p_Val2_s_reg_288,
        ce => ap_const_logic_1,
        dout => grp_fu_892_p2);

    MASTER_CNN_mul_muibs_U613 : component MASTER_CNN_mul_muibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 18,
        dout_WIDTH => 35)
    port map (
        din0 => p_Val2_40_i_fu_903_p0,
        din1 => reg_362,
        dout => p_Val2_40_i_fu_903_p2);

    MASTER_CNN_mul_muibs_U614 : component MASTER_CNN_mul_muibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 18,
        dout_WIDTH => 35)
    port map (
        din0 => p_Val2_40_1_i_fu_909_p0,
        din1 => reg_362,
        dout => p_Val2_40_1_i_fu_909_p2);

    MASTER_CNN_mul_muibs_U615 : component MASTER_CNN_mul_muibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 18,
        dout_WIDTH => 35)
    port map (
        din0 => p_Val2_40_2_i_fu_914_p0,
        din1 => reg_362,
        dout => p_Val2_40_2_i_fu_914_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (dst_V_offset_empty_n = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (dst_V_offset_empty_n = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_exp_24_16_s_fu_335_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_exp_24_16_s_fu_335_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state11) and (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))))) then 
                    ap_reg_grp_exp_24_16_s_fu_335_ap_start <= ap_const_logic_1;
                elsif ((grp_exp_24_16_s_fu_335_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_exp_24_16_s_fu_335_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_exp_24_16_s_fu_344_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_exp_24_16_s_fu_344_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state11) and (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))))) then 
                    ap_reg_grp_exp_24_16_s_fu_344_ap_start <= ap_const_logic_1;
                elsif ((grp_exp_24_16_s_fu_344_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_exp_24_16_s_fu_344_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_exp_24_16_s_fu_353_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_exp_24_16_s_fu_353_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state11) and (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))))) then 
                    ap_reg_grp_exp_24_16_s_fu_353_ap_start <= ap_const_logic_1;
                elsif ((grp_exp_24_16_s_fu_353_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_exp_24_16_s_fu_353_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i5_i_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i5_i_reg_300 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond6_i_fu_809_p2 = ap_const_lv1_0))) then 
                i5_i_reg_300 <= i_fu_815_p2;
            end if; 
        end if;
    end process;

    j_i_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond3_i_reg_964 = ap_const_lv1_0))) then 
                j_i_reg_277 <= j_reg_968;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (dst_V_offset_empty_n = ap_const_logic_1))) then 
                j_i_reg_277 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                p_Val2_s_reg_288 <= ap_const_lv24_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond6_i_fu_809_p2 = ap_const_lv1_0))) then 
                p_Val2_s_reg_288 <= Sum_Exp_V_fu_830_p2;
            end if; 
        end if;
    end process;

    storemerge1_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_55_i_fu_836_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                storemerge1_reg_311 <= ap_const_lv16_100;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                storemerge1_reg_311 <= tmp_37_fu_877_p1;
            end if; 
        end if;
    end process;

    storemerge2_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_55_i_reg_1086 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                storemerge2_reg_323 <= ap_const_lv16_100;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state88) and (tmp_55_i_reg_1086 = ap_const_lv1_0))) then 
                storemerge2_reg_323 <= tmp_38_fu_898_p1;
            end if; 
        end if;
    end process;

    sum_V_0_i_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_reg_pp0_iter1_exitcond3_i_reg_964 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                sum_V_0_i_reg_267 <= sum_0_V_1_reg_1025;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (dst_V_offset_empty_n = ap_const_logic_1))) then 
                sum_V_0_i_reg_267 <= sum_0_V_reg_924;
            end if; 
        end if;
    end process;

    sum_V_1_i_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_reg_pp0_iter1_exitcond3_i_reg_964 = ap_const_lv1_0))) then 
                sum_V_1_i_reg_257 <= sum_1_V_1_reg_1040;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (dst_V_offset_empty_n = ap_const_logic_1))) then 
                sum_V_1_i_reg_257 <= sum_1_V_reg_934;
            end if; 
        end if;
    end process;

    sum_V_2_i_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_reg_pp0_iter1_exitcond3_i_reg_964 = ap_const_lv1_0))) then 
                sum_V_2_i_reg_247 <= p_Val2_42_2_i_fu_568_p2(27 downto 10);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (dst_V_offset_empty_n = ap_const_logic_1))) then 
                sum_V_2_i_reg_247 <= Bias_V_Dout_A(18 - 1 downto 0);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                Exp_Out_0_V_reg_1055 <= grp_exp_24_16_s_fu_335_ap_return;
                Exp_Out_1_V_reg_1061 <= grp_exp_24_16_s_fu_344_ap_return;
                Exp_Out_2_V_reg_1067 <= grp_exp_24_16_s_fu_353_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond3_i_reg_964 = ap_const_lv1_0))) then
                    OP1_V_i_cast_reg_1009(16 downto 0) <= OP1_V_i_cast_fu_487_p1(16 downto 0);
                p_Val2_40_i_reg_1015 <= p_Val2_40_i_fu_903_p2;
                    tmp_48_1_i_reg_1020(27 downto 10) <= tmp_48_1_i_fu_494_p3(27 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_reg_pp0_iter1_exitcond3_i_reg_964 <= exitcond3_i_reg_964;
                exitcond3_i_reg_964 <= exitcond3_i_fu_415_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (dst_V_offset_empty_n = ap_const_logic_1))) then
                dst_V_addr_1_reg_949 <= tmp_9_cast_fu_399_p1(10 - 1 downto 0);
                dst_V_addr_2_reg_954 <= tmp_10_cast_fu_410_p1(10 - 1 downto 0);
                dst_V_addr_reg_944 <= tmp_8_cast_fu_388_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                j_reg_968 <= j_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond3_i_reg_964 = ap_const_lv1_0))) then
                p_Val2_40_1_i_reg_1030 <= p_Val2_40_1_i_fu_909_p2;
                    tmp_48_2_i_reg_1035(27 downto 10) <= tmp_48_2_i_fu_528_p3(27 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_reg_pp0_iter1_exitcond3_i_reg_964 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                p_Val2_40_2_i_reg_1045 <= p_Val2_40_2_i_fu_914_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond3_i_reg_964 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond3_i_reg_964 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond3_i_reg_964 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then
                reg_362 <= weight_V_Dout_A(18 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond3_i_reg_964 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                src_V_load_reg_994 <= src_V_q0;
                    tmp_48_i_reg_999(27 downto 10) <= tmp_48_i_fu_469_p3(27 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond3_i_reg_964 = ap_const_lv1_0))) then
                sum_0_V_1_reg_1025 <= p_Val2_42_i_fu_508_p2(27 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                sum_0_V_reg_924 <= Bias_V_Dout_A(18 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_reg_pp0_iter1_exitcond3_i_reg_964 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                sum_1_V_1_reg_1040 <= p_Val2_42_1_i_fu_542_p2(27 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                sum_1_V_reg_934 <= Bias_V_Dout_A(18 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond3_i_fu_415_p2 = ap_const_lv1_0))) then
                tmp_22_reg_973 <= tmp_22_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_55_i_reg_1086 <= tmp_55_i_fu_836_p2;
            end if;
        end if;
    end process;
    tmp_48_i_reg_999(9 downto 0) <= "0000000000";
    OP1_V_i_cast_reg_1009(34 downto 17) <= "000000000000000000";
    tmp_48_1_i_reg_1020(9 downto 0) <= "0000000000";
    tmp_48_2_i_reg_1035(9 downto 0) <= "0000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, dst_V_offset_empty_n, ap_CS_fsm_state4, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, exitcond3_i_fu_415_p2, ap_CS_fsm_state16, exitcond6_i_fu_809_p2, tmp_55_i_fu_836_p2, tmp_55_i_reg_1086, ap_CS_fsm_state17, ap_CS_fsm_state53, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (dst_V_offset_empty_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond3_i_fu_415_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond3_i_fu_415_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond6_i_fu_809_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                if (((tmp_55_i_fu_836_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (((tmp_55_i_reg_1086 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Bias_V_Addr_A <= std_logic_vector(shift_left(unsigned(Bias_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    Bias_V_Addr_A_orig_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Bias_V_Addr_A_orig <= ap_const_lv64_2(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Bias_V_Addr_A_orig <= ap_const_lv64_1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            Bias_V_Addr_A_orig <= ap_const_lv64_0(32 - 1 downto 0);
        else 
            Bias_V_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    Bias_V_Din_A <= ap_const_lv32_0;

    Bias_V_EN_A_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            Bias_V_EN_A <= ap_const_logic_1;
        else 
            Bias_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    Bias_V_WEN_A <= ap_const_lv4_0;
    OP1_V_i_cast_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_V_load_reg_994),35));
    Sum_Exp_V_fu_830_p2 <= std_logic_vector(unsigned(p_Val2_11_fu_821_p5) + unsigned(p_Val2_s_reg_288));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(7);
    ap_CS_fsm_state15 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state52 <= ap_CS_fsm(48);
    ap_CS_fsm_state53 <= ap_CS_fsm(49);
    ap_CS_fsm_state88 <= ap_CS_fsm(84);
    ap_NS_fsm_state11 <= ap_NS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(exitcond3_i_fu_415_p2)
    begin
        if ((exitcond3_i_fu_415_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_i_phi_fu_281_p4_assign_proc : process(j_i_reg_277, exitcond3_i_reg_964, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, j_reg_968, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond3_i_reg_964 = ap_const_lv1_0))) then 
            ap_phi_mux_j_i_phi_fu_281_p4 <= j_reg_968;
        else 
            ap_phi_mux_j_i_phi_fu_281_p4 <= j_i_reg_277;
        end if; 
    end process;


    ap_phi_mux_storemerge2_phi_fu_327_p4_assign_proc : process(tmp_55_i_reg_1086, tmp_38_fu_898_p1, storemerge2_reg_323, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) and (tmp_55_i_reg_1086 = ap_const_lv1_0))) then 
            ap_phi_mux_storemerge2_phi_fu_327_p4 <= tmp_38_fu_898_p1;
        else 
            ap_phi_mux_storemerge2_phi_fu_327_p4 <= storemerge2_reg_323;
        end if; 
    end process;


    ap_phi_mux_sum_V_0_i_phi_fu_270_p4_assign_proc : process(sum_V_0_i_reg_267, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond3_i_reg_964, sum_0_V_1_reg_1025, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_reg_pp0_iter1_exitcond3_i_reg_964 = ap_const_lv1_0))) then 
            ap_phi_mux_sum_V_0_i_phi_fu_270_p4 <= sum_0_V_1_reg_1025;
        else 
            ap_phi_mux_sum_V_0_i_phi_fu_270_p4 <= sum_V_0_i_reg_267;
        end if; 
    end process;


    ap_phi_mux_sum_V_1_i_phi_fu_260_p4_assign_proc : process(sum_V_1_i_reg_257, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond3_i_reg_964, sum_1_V_1_reg_1040, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_reg_pp0_iter1_exitcond3_i_reg_964 = ap_const_lv1_0))) then 
            ap_phi_mux_sum_V_1_i_phi_fu_260_p4 <= sum_1_V_1_reg_1040;
        else 
            ap_phi_mux_sum_V_1_i_phi_fu_260_p4 <= sum_V_1_i_reg_257;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    dst_V_address0_assign_proc : process(dst_V_addr_reg_944, dst_V_addr_1_reg_949, dst_V_addr_2_reg_954, ap_CS_fsm_state17, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            dst_V_address0 <= dst_V_addr_2_reg_954;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            dst_V_address0 <= dst_V_addr_1_reg_949;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            dst_V_address0 <= dst_V_addr_reg_944;
        else 
            dst_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    dst_V_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            dst_V_ce0 <= ap_const_logic_1;
        else 
            dst_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_V_d0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state52, ap_CS_fsm_state53, storemerge1_reg_311, ap_phi_mux_storemerge2_phi_fu_327_p4, ap_CS_fsm_state88, tmp_36_fu_872_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            dst_V_d0 <= ap_phi_mux_storemerge2_phi_fu_327_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            dst_V_d0 <= storemerge1_reg_311;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            dst_V_d0 <= tmp_36_fu_872_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dst_V_d0 <= ap_const_lv16_100;
        else 
            dst_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dst_V_offset_blk_n_assign_proc : process(dst_V_offset_empty_n, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dst_V_offset_blk_n <= dst_V_offset_empty_n;
        else 
            dst_V_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_V_offset_cast_i_s_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dst_V_offset_dout),11));

    dst_V_offset_read_assign_proc : process(dst_V_offset_empty_n, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (dst_V_offset_empty_n = ap_const_logic_1))) then 
            dst_V_offset_read <= ap_const_logic_1;
        else 
            dst_V_offset_read <= ap_const_logic_0;
        end if; 
    end process;


    dst_V_we0_assign_proc : process(tmp_55_i_fu_836_p2, ap_CS_fsm_state17, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or ((tmp_55_i_fu_836_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            dst_V_we0 <= ap_const_logic_1;
        else 
            dst_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond3_i_fu_415_p2 <= "1" when (ap_phi_mux_j_i_phi_fu_281_p4 = ap_const_lv6_3C) else "0";
    exitcond6_i_fu_809_p2 <= "1" when (i5_i_reg_300 = ap_const_lv2_3) else "0";
    grp_exp_24_16_s_fu_335_ap_start <= ap_reg_grp_exp_24_16_s_fu_335_ap_start;
    grp_exp_24_16_s_fu_335_x_V <= 
        tmp_5_fu_640_p4 when (tmp_33_fu_588_p3(0) = '1') else 
        tmp_4_fu_636_p1;
    grp_exp_24_16_s_fu_344_ap_start <= ap_reg_grp_exp_24_16_s_fu_344_ap_start;
    grp_exp_24_16_s_fu_344_x_V <= 
        tmp_13_fu_715_p4 when (tmp_34_fu_663_p3(0) = '1') else 
        tmp_12_fu_711_p1;
    grp_exp_24_16_s_fu_353_ap_start <= ap_reg_grp_exp_24_16_s_fu_353_ap_start;
    grp_exp_24_16_s_fu_353_x_V <= 
        tmp_19_fu_790_p4 when (tmp_35_fu_738_p3(0) = '1') else 
        tmp_18_fu_786_p1;

    grp_fu_853_ap_start_assign_proc : process(tmp_55_i_fu_836_p2, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_55_i_fu_836_p2 = ap_const_lv1_0))) then 
            grp_fu_853_ap_start <= ap_const_logic_1;
        else 
            grp_fu_853_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_853_p0 <= (Exp_Out_0_V_reg_1055 & ap_const_lv8_0);
    grp_fu_853_p1 <= tmp_60_i_fu_849_p1(24 - 1 downto 0);

    grp_fu_866_ap_start_assign_proc : process(tmp_55_i_fu_836_p2, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_55_i_fu_836_p2 = ap_const_lv1_0))) then 
            grp_fu_866_ap_start <= ap_const_logic_1;
        else 
            grp_fu_866_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_866_p0 <= (Exp_Out_1_V_reg_1061 & ap_const_lv8_0);
    grp_fu_866_p1 <= tmp_60_i_fu_849_p1(24 - 1 downto 0);

    grp_fu_892_ap_start_assign_proc : process(tmp_55_i_reg_1086, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) and (tmp_55_i_reg_1086 = ap_const_lv1_0))) then 
            grp_fu_892_ap_start <= ap_const_logic_1;
        else 
            grp_fu_892_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_892_p0 <= (Exp_Out_2_V_reg_1067 & ap_const_lv8_0);
    i_fu_815_p2 <= std_logic_vector(unsigned(i5_i_reg_300) + unsigned(ap_const_lv2_1));
    j_fu_421_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_i_phi_fu_281_p4) + unsigned(ap_const_lv6_1));
    p_Val2_40_1_i_fu_909_p0 <= OP1_V_i_cast_reg_1009(17 - 1 downto 0);
    p_Val2_40_2_i_fu_914_p0 <= OP1_V_i_cast_reg_1009(17 - 1 downto 0);
    p_Val2_40_i_fu_903_p0 <= p_Val2_40_i_fu_903_p00(17 - 1 downto 0);
    p_Val2_40_i_fu_903_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_V_load_reg_994),35));
    p_Val2_42_1_i_fu_542_p2 <= std_logic_vector(unsigned(tmp_48_1_cast4_i_cas_fu_539_p1) + unsigned(tmp_465_1_i_cast_fu_536_p1));
    p_Val2_42_2_i_fu_568_p2 <= std_logic_vector(unsigned(tmp_48_2_cast6_i_cas_fu_565_p1) + unsigned(tmp_465_2_i_cast_fu_562_p1));
    p_Val2_42_i_fu_508_p2 <= std_logic_vector(unsigned(tmp_48_cast2_i_cast_fu_505_p1) + unsigned(tmp_465_i_cast_fu_502_p1));
    p_lshr_1_cast_i_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_677_p4),16));
    p_lshr_2_cast_i_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_752_p4),16));
    p_lshr_cast_i_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_602_p4),16));
    p_neg_1_i_fu_671_p2 <= std_logic_vector(unsigned(ap_const_lv19_0) - unsigned(tmp_40_tr_1_i_fu_659_p1));
    p_neg_2_i_fu_746_p2 <= std_logic_vector(unsigned(ap_const_lv19_0) - unsigned(tmp_40_tr_2_i_fu_734_p1));
    p_neg_i_fu_596_p2 <= std_logic_vector(unsigned(ap_const_lv19_0) - unsigned(tmp_40_tr_i_fu_584_p1));
    p_neg_t_1_i_fu_691_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(p_lshr_1_cast_i_fu_687_p1));
    p_neg_t_2_i_fu_766_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(p_lshr_2_cast_i_fu_762_p1));
    p_neg_t_i_fu_616_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(p_lshr_cast_i_fu_612_p1));
    p_shl3_cast_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_436_p3),9));
    p_shl_cast_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_370_p3),11));
    src_V_address0 <= tmp_i_fu_427_p1(6 - 1 downto 0);

    src_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_V_ce0 <= ap_const_logic_1;
        else 
            src_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        tmp_10_cast_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_404_p2),64));

    tmp_10_fu_697_p4 <= sum_V_1_i_reg_257(17 downto 6);
        tmp_11_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_fu_697_p4),13));

    tmp_12_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_707_p1),14));
    tmp_13_fu_715_p4 <= p_neg_t_1_i_fu_691_p2(15 downto 2);
    tmp_15_fu_752_p4 <= p_neg_2_i_fu_746_p2(18 downto 4);
    tmp_16_fu_772_p4 <= sum_V_2_i_reg_247(17 downto 6);
        tmp_17_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_fu_772_p4),13));

    tmp_18_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_782_p1),14));
    tmp_19_fu_790_p4 <= p_neg_t_2_i_fu_766_p2(15 downto 2);
    tmp_1_fu_602_p4 <= p_neg_i_fu_596_p2(18 downto 4);
    tmp_21_fu_436_p3 <= (ap_phi_mux_j_i_phi_fu_281_p4 & ap_const_lv2_0);
    tmp_22_fu_448_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_444_p1) - unsigned(tmp_i_cast_fu_432_p1));
    tmp_23_fu_459_p2 <= std_logic_vector(unsigned(tmp_22_reg_973) + unsigned(ap_const_lv9_1));
    tmp_24_fu_477_p2 <= std_logic_vector(unsigned(tmp_22_reg_973) + unsigned(ap_const_lv9_2));
    tmp_2_fu_622_p4 <= sum_V_0_i_reg_267(17 downto 6);
        tmp_30_cast_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_22_fu_448_p2),64));

        tmp_31_cast_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_23_fu_459_p2),64));

        tmp_32_cast_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_24_fu_477_p2),64));

    tmp_33_fu_588_p3 <= sum_V_0_i_reg_267(17 downto 17);
    tmp_34_fu_663_p3 <= sum_V_1_i_reg_257(17 downto 17);
    tmp_35_fu_738_p3 <= sum_V_2_i_reg_247(17 downto 17);
    tmp_36_fu_872_p1 <= grp_fu_853_p2(16 - 1 downto 0);
    tmp_37_fu_877_p1 <= grp_fu_866_p2(16 - 1 downto 0);
    tmp_38_fu_898_p1 <= grp_fu_892_p2(16 - 1 downto 0);
        tmp_3_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_622_p4),13));

        tmp_40_tr_1_i_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_V_1_i_reg_257),19));

        tmp_40_tr_2_i_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_V_2_i_reg_247),19));

        tmp_40_tr_i_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_V_0_i_reg_267),19));

    tmp_465_1_i_cast_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_40_1_i_reg_1030),36));
    tmp_465_2_i_cast_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_40_2_i_reg_1045),36));
    tmp_465_i_cast_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_40_i_reg_1015),36));
    tmp_48_1_cast4_i_cas_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_1_i_reg_1020),36));
    tmp_48_1_i_fu_494_p3 <= (ap_phi_mux_sum_V_1_i_phi_fu_260_p4 & ap_const_lv10_0);
    tmp_48_2_cast6_i_cas_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_2_i_reg_1035),36));
    tmp_48_2_i_fu_528_p3 <= (sum_V_2_i_reg_247 & ap_const_lv10_0);
    tmp_48_cast2_i_cast_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_i_reg_999),36));
    tmp_48_i_fu_469_p3 <= (ap_phi_mux_sum_V_0_i_phi_fu_270_p4 & ap_const_lv10_0);
    tmp_4_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_632_p1),14));
    tmp_55_i_fu_836_p2 <= "1" when (p_Val2_s_reg_288 = ap_const_lv24_0) else "0";
    tmp_5_fu_640_p4 <= p_neg_t_i_fu_616_p2(15 downto 2);
        tmp_60_i_fu_849_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_288),32));

    tmp_7_fu_677_p4 <= p_neg_1_i_fu_671_p2(18 downto 4);
        tmp_8_cast_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_382_p2),64));

    tmp_8_fu_382_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_378_p1) - unsigned(dst_V_offset_cast_i_s_fu_366_p1));
        tmp_9_cast_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_fu_393_p2),64));

    tmp_9_fu_393_p2 <= std_logic_vector(unsigned(tmp_8_fu_382_p2) + unsigned(ap_const_lv11_1));
    tmp_fu_370_p3 <= (dst_V_offset_dout & ap_const_lv2_0);
    tmp_i_cast_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_i_phi_fu_281_p4),9));
    tmp_i_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_i_phi_fu_281_p4),64));
    tmp_s_fu_404_p2 <= std_logic_vector(unsigned(tmp_8_fu_382_p2) + unsigned(ap_const_lv11_2));
    weight_V_Addr_A <= std_logic_vector(shift_left(unsigned(weight_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    weight_V_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage1, ap_block_pp0_stage0, tmp_30_cast_fu_454_p1, tmp_31_cast_fu_464_p1, tmp_32_cast_fu_482_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                weight_V_Addr_A_orig <= tmp_32_cast_fu_482_p1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                weight_V_Addr_A_orig <= tmp_31_cast_fu_464_p1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                weight_V_Addr_A_orig <= tmp_30_cast_fu_454_p1(32 - 1 downto 0);
            else 
                weight_V_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            weight_V_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    weight_V_Din_A <= ap_const_lv32_0;

    weight_V_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            weight_V_EN_A <= ap_const_logic_1;
        else 
            weight_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    weight_V_WEN_A <= ap_const_lv4_0;
end behav;
