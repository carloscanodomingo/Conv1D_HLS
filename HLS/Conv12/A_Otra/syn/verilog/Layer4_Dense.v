// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Layer4_Dense (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        src_V_address0,
        src_V_ce0,
        src_V_q0,
        weight_V_Addr_A,
        weight_V_EN_A,
        weight_V_WEN_A,
        weight_V_Din_A,
        weight_V_Dout_A,
        Bias_V_Addr_A,
        Bias_V_EN_A,
        Bias_V_WEN_A,
        Bias_V_Din_A,
        Bias_V_Dout_A,
        dst_V_address0,
        dst_V_ce0,
        dst_V_we0,
        dst_V_d0,
        dst_V_offset_dout,
        dst_V_offset_empty_n,
        dst_V_offset_read
);

parameter    ap_ST_fsm_state1 = 85'd1;
parameter    ap_ST_fsm_state2 = 85'd2;
parameter    ap_ST_fsm_state3 = 85'd4;
parameter    ap_ST_fsm_state4 = 85'd8;
parameter    ap_ST_fsm_pp0_stage0 = 85'd16;
parameter    ap_ST_fsm_pp0_stage1 = 85'd32;
parameter    ap_ST_fsm_pp0_stage2 = 85'd64;
parameter    ap_ST_fsm_state11 = 85'd128;
parameter    ap_ST_fsm_state12 = 85'd256;
parameter    ap_ST_fsm_state13 = 85'd512;
parameter    ap_ST_fsm_state14 = 85'd1024;
parameter    ap_ST_fsm_state15 = 85'd2048;
parameter    ap_ST_fsm_state16 = 85'd4096;
parameter    ap_ST_fsm_state17 = 85'd8192;
parameter    ap_ST_fsm_state18 = 85'd16384;
parameter    ap_ST_fsm_state19 = 85'd32768;
parameter    ap_ST_fsm_state20 = 85'd65536;
parameter    ap_ST_fsm_state21 = 85'd131072;
parameter    ap_ST_fsm_state22 = 85'd262144;
parameter    ap_ST_fsm_state23 = 85'd524288;
parameter    ap_ST_fsm_state24 = 85'd1048576;
parameter    ap_ST_fsm_state25 = 85'd2097152;
parameter    ap_ST_fsm_state26 = 85'd4194304;
parameter    ap_ST_fsm_state27 = 85'd8388608;
parameter    ap_ST_fsm_state28 = 85'd16777216;
parameter    ap_ST_fsm_state29 = 85'd33554432;
parameter    ap_ST_fsm_state30 = 85'd67108864;
parameter    ap_ST_fsm_state31 = 85'd134217728;
parameter    ap_ST_fsm_state32 = 85'd268435456;
parameter    ap_ST_fsm_state33 = 85'd536870912;
parameter    ap_ST_fsm_state34 = 85'd1073741824;
parameter    ap_ST_fsm_state35 = 85'd2147483648;
parameter    ap_ST_fsm_state36 = 85'd4294967296;
parameter    ap_ST_fsm_state37 = 85'd8589934592;
parameter    ap_ST_fsm_state38 = 85'd17179869184;
parameter    ap_ST_fsm_state39 = 85'd34359738368;
parameter    ap_ST_fsm_state40 = 85'd68719476736;
parameter    ap_ST_fsm_state41 = 85'd137438953472;
parameter    ap_ST_fsm_state42 = 85'd274877906944;
parameter    ap_ST_fsm_state43 = 85'd549755813888;
parameter    ap_ST_fsm_state44 = 85'd1099511627776;
parameter    ap_ST_fsm_state45 = 85'd2199023255552;
parameter    ap_ST_fsm_state46 = 85'd4398046511104;
parameter    ap_ST_fsm_state47 = 85'd8796093022208;
parameter    ap_ST_fsm_state48 = 85'd17592186044416;
parameter    ap_ST_fsm_state49 = 85'd35184372088832;
parameter    ap_ST_fsm_state50 = 85'd70368744177664;
parameter    ap_ST_fsm_state51 = 85'd140737488355328;
parameter    ap_ST_fsm_state52 = 85'd281474976710656;
parameter    ap_ST_fsm_state53 = 85'd562949953421312;
parameter    ap_ST_fsm_state54 = 85'd1125899906842624;
parameter    ap_ST_fsm_state55 = 85'd2251799813685248;
parameter    ap_ST_fsm_state56 = 85'd4503599627370496;
parameter    ap_ST_fsm_state57 = 85'd9007199254740992;
parameter    ap_ST_fsm_state58 = 85'd18014398509481984;
parameter    ap_ST_fsm_state59 = 85'd36028797018963968;
parameter    ap_ST_fsm_state60 = 85'd72057594037927936;
parameter    ap_ST_fsm_state61 = 85'd144115188075855872;
parameter    ap_ST_fsm_state62 = 85'd288230376151711744;
parameter    ap_ST_fsm_state63 = 85'd576460752303423488;
parameter    ap_ST_fsm_state64 = 85'd1152921504606846976;
parameter    ap_ST_fsm_state65 = 85'd2305843009213693952;
parameter    ap_ST_fsm_state66 = 85'd4611686018427387904;
parameter    ap_ST_fsm_state67 = 85'd9223372036854775808;
parameter    ap_ST_fsm_state68 = 85'd18446744073709551616;
parameter    ap_ST_fsm_state69 = 85'd36893488147419103232;
parameter    ap_ST_fsm_state70 = 85'd73786976294838206464;
parameter    ap_ST_fsm_state71 = 85'd147573952589676412928;
parameter    ap_ST_fsm_state72 = 85'd295147905179352825856;
parameter    ap_ST_fsm_state73 = 85'd590295810358705651712;
parameter    ap_ST_fsm_state74 = 85'd1180591620717411303424;
parameter    ap_ST_fsm_state75 = 85'd2361183241434822606848;
parameter    ap_ST_fsm_state76 = 85'd4722366482869645213696;
parameter    ap_ST_fsm_state77 = 85'd9444732965739290427392;
parameter    ap_ST_fsm_state78 = 85'd18889465931478580854784;
parameter    ap_ST_fsm_state79 = 85'd37778931862957161709568;
parameter    ap_ST_fsm_state80 = 85'd75557863725914323419136;
parameter    ap_ST_fsm_state81 = 85'd151115727451828646838272;
parameter    ap_ST_fsm_state82 = 85'd302231454903657293676544;
parameter    ap_ST_fsm_state83 = 85'd604462909807314587353088;
parameter    ap_ST_fsm_state84 = 85'd1208925819614629174706176;
parameter    ap_ST_fsm_state85 = 85'd2417851639229258349412352;
parameter    ap_ST_fsm_state86 = 85'd4835703278458516698824704;
parameter    ap_ST_fsm_state87 = 85'd9671406556917033397649408;
parameter    ap_ST_fsm_state88 = 85'd19342813113834066795298816;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [5:0] src_V_address0;
output   src_V_ce0;
input  [16:0] src_V_q0;
output  [31:0] weight_V_Addr_A;
output   weight_V_EN_A;
output  [3:0] weight_V_WEN_A;
output  [31:0] weight_V_Din_A;
input  [31:0] weight_V_Dout_A;
output  [31:0] Bias_V_Addr_A;
output   Bias_V_EN_A;
output  [3:0] Bias_V_WEN_A;
output  [31:0] Bias_V_Din_A;
input  [31:0] Bias_V_Dout_A;
output  [9:0] dst_V_address0;
output   dst_V_ce0;
output   dst_V_we0;
output  [15:0] dst_V_d0;
input  [7:0] dst_V_offset_dout;
input   dst_V_offset_empty_n;
output   dst_V_offset_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_V_ce0;
reg weight_V_EN_A;
reg Bias_V_EN_A;
reg[9:0] dst_V_address0;
reg dst_V_ce0;
reg dst_V_we0;
reg[15:0] dst_V_d0;
reg dst_V_offset_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [84:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    dst_V_offset_blk_n;
wire    ap_CS_fsm_state4;
reg   [17:0] sum_V_2_i_reg_247;
reg   [17:0] sum_V_1_i_reg_257;
reg   [17:0] sum_V_0_i_reg_267;
reg   [5:0] j_i_reg_277;
reg  signed [17:0] reg_362;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state6_pp0_stage1_iter0;
wire    ap_block_state9_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] exitcond3_i_reg_964;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state7_pp0_stage2_iter0;
wire    ap_block_state10_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg    ap_block_state1;
reg   [17:0] sum_0_V_reg_924;
wire    ap_CS_fsm_state2;
reg   [17:0] sum_1_V_reg_934;
wire    ap_CS_fsm_state3;
reg   [9:0] dst_V_addr_reg_944;
reg   [9:0] dst_V_addr_1_reg_949;
reg   [9:0] dst_V_addr_2_reg_954;
wire   [0:0] exitcond3_i_fu_415_p2;
reg   [0:0] ap_reg_pp0_iter1_exitcond3_i_reg_964;
wire   [5:0] j_fu_421_p2;
reg   [5:0] j_reg_968;
wire   [8:0] tmp_22_fu_448_p2;
reg   [8:0] tmp_22_reg_973;
reg   [16:0] src_V_load_reg_994;
wire   [27:0] tmp_48_i_fu_469_p3;
reg   [27:0] tmp_48_i_reg_999;
wire   [34:0] OP1_V_i_cast_fu_487_p1;
reg   [34:0] OP1_V_i_cast_reg_1009;
wire  signed [34:0] p_Val2_40_i_fu_903_p2;
reg  signed [34:0] p_Val2_40_i_reg_1015;
wire   [27:0] tmp_48_1_i_fu_494_p3;
reg   [27:0] tmp_48_1_i_reg_1020;
reg   [17:0] sum_0_V_1_reg_1025;
wire  signed [34:0] p_Val2_40_1_i_fu_909_p2;
reg  signed [34:0] p_Val2_40_1_i_reg_1030;
wire   [27:0] tmp_48_2_i_fu_528_p3;
reg   [27:0] tmp_48_2_i_reg_1035;
reg   [17:0] sum_1_V_1_reg_1040;
wire  signed [34:0] p_Val2_40_2_i_fu_914_p2;
reg  signed [34:0] p_Val2_40_2_i_reg_1045;
wire   [23:0] grp_exp_24_16_s_fu_335_ap_return;
reg   [23:0] Exp_Out_0_V_reg_1055;
wire    ap_CS_fsm_state15;
wire   [23:0] grp_exp_24_16_s_fu_344_ap_return;
reg   [23:0] Exp_Out_1_V_reg_1061;
wire   [23:0] grp_exp_24_16_s_fu_353_ap_return;
reg   [23:0] Exp_Out_2_V_reg_1067;
wire   [1:0] i_fu_815_p2;
wire    ap_CS_fsm_state16;
wire   [23:0] Sum_Exp_V_fu_830_p2;
wire   [0:0] exitcond6_i_fu_809_p2;
wire   [0:0] tmp_55_i_fu_836_p2;
reg   [0:0] tmp_55_i_reg_1086;
wire    ap_CS_fsm_state17;
wire  signed [31:0] tmp_60_i_fu_849_p1;
wire   [15:0] tmp_37_fu_877_p1;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
wire    ap_block_pp0_stage2_subdone;
wire    grp_exp_24_16_s_fu_335_ap_start;
wire    grp_exp_24_16_s_fu_335_ap_done;
wire    grp_exp_24_16_s_fu_335_ap_idle;
wire    grp_exp_24_16_s_fu_335_ap_ready;
wire   [13:0] grp_exp_24_16_s_fu_335_x_V;
wire    grp_exp_24_16_s_fu_344_ap_start;
wire    grp_exp_24_16_s_fu_344_ap_done;
wire    grp_exp_24_16_s_fu_344_ap_idle;
wire    grp_exp_24_16_s_fu_344_ap_ready;
wire   [13:0] grp_exp_24_16_s_fu_344_x_V;
wire    grp_exp_24_16_s_fu_353_ap_start;
wire    grp_exp_24_16_s_fu_353_ap_done;
wire    grp_exp_24_16_s_fu_353_ap_idle;
wire    grp_exp_24_16_s_fu_353_ap_ready;
wire   [13:0] grp_exp_24_16_s_fu_353_x_V;
reg   [17:0] ap_phi_mux_sum_V_1_i_phi_fu_260_p4;
wire    ap_block_pp0_stage2;
reg   [17:0] ap_phi_mux_sum_V_0_i_phi_fu_270_p4;
wire    ap_block_pp0_stage1;
reg   [5:0] ap_phi_mux_j_i_phi_fu_281_p4;
wire    ap_block_pp0_stage0;
reg  signed [23:0] p_Val2_s_reg_288;
reg   [1:0] i5_i_reg_300;
reg   [15:0] storemerge1_reg_311;
wire   [15:0] tmp_38_fu_898_p1;
reg   [15:0] ap_phi_mux_storemerge2_phi_fu_327_p4;
reg   [15:0] storemerge2_reg_323;
wire    ap_CS_fsm_state88;
reg    ap_reg_grp_exp_24_16_s_fu_335_ap_start;
reg   [84:0] ap_NS_fsm;
wire    ap_NS_fsm_state11;
wire    ap_CS_fsm_state11;
reg    ap_reg_grp_exp_24_16_s_fu_344_ap_start;
reg    ap_reg_grp_exp_24_16_s_fu_353_ap_start;
wire  signed [63:0] tmp_8_cast_fu_388_p1;
wire  signed [63:0] tmp_9_cast_fu_399_p1;
wire  signed [63:0] tmp_10_cast_fu_410_p1;
wire  signed [63:0] tmp_30_cast_fu_454_p1;
wire   [63:0] tmp_i_fu_427_p1;
wire  signed [63:0] tmp_31_cast_fu_464_p1;
wire  signed [63:0] tmp_32_cast_fu_482_p1;
reg   [31:0] Bias_V_Addr_A_orig;
reg   [31:0] weight_V_Addr_A_orig;
wire   [15:0] tmp_36_fu_872_p1;
wire   [9:0] tmp_fu_370_p3;
wire   [10:0] p_shl_cast_fu_378_p1;
wire   [10:0] dst_V_offset_cast_i_s_fu_366_p1;
wire   [10:0] tmp_8_fu_382_p2;
wire   [10:0] tmp_9_fu_393_p2;
wire   [10:0] tmp_s_fu_404_p2;
wire   [7:0] tmp_21_fu_436_p3;
wire   [8:0] p_shl3_cast_fu_444_p1;
wire   [8:0] tmp_i_cast_fu_432_p1;
wire   [8:0] tmp_23_fu_459_p2;
wire   [8:0] tmp_24_fu_477_p2;
wire   [35:0] tmp_48_cast2_i_cast_fu_505_p1;
wire   [35:0] tmp_465_i_cast_fu_502_p1;
wire   [35:0] p_Val2_42_i_fu_508_p2;
wire   [35:0] tmp_48_1_cast4_i_cas_fu_539_p1;
wire   [35:0] tmp_465_1_i_cast_fu_536_p1;
wire   [35:0] p_Val2_42_1_i_fu_542_p2;
wire   [35:0] tmp_48_2_cast6_i_cas_fu_565_p1;
wire   [35:0] tmp_465_2_i_cast_fu_562_p1;
wire   [35:0] p_Val2_42_2_i_fu_568_p2;
wire  signed [18:0] tmp_40_tr_i_fu_584_p1;
wire   [18:0] p_neg_i_fu_596_p2;
wire   [14:0] tmp_1_fu_602_p4;
wire   [15:0] p_lshr_cast_i_fu_612_p1;
wire   [11:0] tmp_2_fu_622_p4;
wire  signed [12:0] tmp_3_fu_632_p1;
wire   [15:0] p_neg_t_i_fu_616_p2;
wire   [0:0] tmp_33_fu_588_p3;
wire   [13:0] tmp_5_fu_640_p4;
wire   [13:0] tmp_4_fu_636_p1;
wire  signed [18:0] tmp_40_tr_1_i_fu_659_p1;
wire   [18:0] p_neg_1_i_fu_671_p2;
wire   [14:0] tmp_7_fu_677_p4;
wire   [15:0] p_lshr_1_cast_i_fu_687_p1;
wire   [11:0] tmp_10_fu_697_p4;
wire  signed [12:0] tmp_11_fu_707_p1;
wire   [15:0] p_neg_t_1_i_fu_691_p2;
wire   [0:0] tmp_34_fu_663_p3;
wire   [13:0] tmp_13_fu_715_p4;
wire   [13:0] tmp_12_fu_711_p1;
wire  signed [18:0] tmp_40_tr_2_i_fu_734_p1;
wire   [18:0] p_neg_2_i_fu_746_p2;
wire   [14:0] tmp_15_fu_752_p4;
wire   [15:0] p_lshr_2_cast_i_fu_762_p1;
wire   [11:0] tmp_16_fu_772_p4;
wire  signed [12:0] tmp_17_fu_782_p1;
wire   [15:0] p_neg_t_2_i_fu_766_p2;
wire   [0:0] tmp_35_fu_738_p3;
wire   [13:0] tmp_19_fu_790_p4;
wire   [13:0] tmp_18_fu_786_p1;
wire   [23:0] p_Val2_11_fu_821_p5;
wire   [31:0] grp_fu_853_p0;
wire  signed [23:0] grp_fu_853_p1;
wire   [31:0] grp_fu_866_p0;
wire  signed [23:0] grp_fu_866_p1;
wire   [15:0] grp_fu_853_p2;
wire   [15:0] grp_fu_866_p2;
wire   [31:0] grp_fu_892_p0;
wire   [15:0] grp_fu_892_p2;
wire   [16:0] p_Val2_40_i_fu_903_p0;
wire   [16:0] p_Val2_40_1_i_fu_909_p0;
wire   [16:0] p_Val2_40_2_i_fu_914_p0;
reg    grp_fu_853_ap_start;
wire    grp_fu_853_ap_done;
reg    grp_fu_866_ap_start;
wire    grp_fu_866_ap_done;
reg    grp_fu_892_ap_start;
wire    grp_fu_892_ap_done;
wire    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [34:0] p_Val2_40_i_fu_903_p00;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 85'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_reg_grp_exp_24_16_s_fu_335_ap_start = 1'b0;
#0 ap_reg_grp_exp_24_16_s_fu_344_ap_start = 1'b0;
#0 ap_reg_grp_exp_24_16_s_fu_353_ap_start = 1'b0;
end

exp_24_16_s grp_exp_24_16_s_fu_335(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_exp_24_16_s_fu_335_ap_start),
    .ap_done(grp_exp_24_16_s_fu_335_ap_done),
    .ap_idle(grp_exp_24_16_s_fu_335_ap_idle),
    .ap_ready(grp_exp_24_16_s_fu_335_ap_ready),
    .x_V(grp_exp_24_16_s_fu_335_x_V),
    .ap_return(grp_exp_24_16_s_fu_335_ap_return)
);

exp_24_16_s grp_exp_24_16_s_fu_344(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_exp_24_16_s_fu_344_ap_start),
    .ap_done(grp_exp_24_16_s_fu_344_ap_done),
    .ap_idle(grp_exp_24_16_s_fu_344_ap_idle),
    .ap_ready(grp_exp_24_16_s_fu_344_ap_ready),
    .x_V(grp_exp_24_16_s_fu_344_x_V),
    .ap_return(grp_exp_24_16_s_fu_344_ap_return)
);

exp_24_16_s grp_exp_24_16_s_fu_353(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_exp_24_16_s_fu_353_ap_start),
    .ap_done(grp_exp_24_16_s_fu_353_ap_done),
    .ap_idle(grp_exp_24_16_s_fu_353_ap_idle),
    .ap_ready(grp_exp_24_16_s_fu_353_ap_ready),
    .x_V(grp_exp_24_16_s_fu_353_x_V),
    .ap_return(grp_exp_24_16_s_fu_353_ap_return)
);

MASTER_CNN_mux_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 24 ),
    .din2_WIDTH( 24 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 24 ))
MASTER_CNN_mux_32g8j_U609(
    .din0(Exp_Out_0_V_reg_1055),
    .din1(Exp_Out_1_V_reg_1061),
    .din2(Exp_Out_2_V_reg_1067),
    .din3(i5_i_reg_300),
    .dout(p_Val2_11_fu_821_p5)
);

MASTER_CNN_sdiv_3hbi #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 16 ))
MASTER_CNN_sdiv_3hbi_U610(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_853_ap_start),
    .done(grp_fu_853_ap_done),
    .din0(grp_fu_853_p0),
    .din1(grp_fu_853_p1),
    .ce(1'b1),
    .dout(grp_fu_853_p2)
);

MASTER_CNN_sdiv_3hbi #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 16 ))
MASTER_CNN_sdiv_3hbi_U611(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_866_ap_start),
    .done(grp_fu_866_ap_done),
    .din0(grp_fu_866_p0),
    .din1(grp_fu_866_p1),
    .ce(1'b1),
    .dout(grp_fu_866_p2)
);

MASTER_CNN_sdiv_3hbi #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 16 ))
MASTER_CNN_sdiv_3hbi_U612(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_892_ap_start),
    .done(grp_fu_892_ap_done),
    .din0(grp_fu_892_p0),
    .din1(p_Val2_s_reg_288),
    .ce(1'b1),
    .dout(grp_fu_892_p2)
);

MASTER_CNN_mul_muibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 35 ))
MASTER_CNN_mul_muibs_U613(
    .din0(p_Val2_40_i_fu_903_p0),
    .din1(reg_362),
    .dout(p_Val2_40_i_fu_903_p2)
);

MASTER_CNN_mul_muibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 35 ))
MASTER_CNN_mul_muibs_U614(
    .din0(p_Val2_40_1_i_fu_909_p0),
    .din1(reg_362),
    .dout(p_Val2_40_1_i_fu_909_p2)
);

MASTER_CNN_mul_muibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 35 ))
MASTER_CNN_mul_muibs_U615(
    .din0(p_Val2_40_2_i_fu_914_p0),
    .din1(reg_362),
    .dout(p_Val2_40_2_i_fu_914_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state88)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (dst_V_offset_empty_n == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (dst_V_offset_empty_n == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_exp_24_16_s_fu_335_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state11) & (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))))) begin
            ap_reg_grp_exp_24_16_s_fu_335_ap_start <= 1'b1;
        end else if ((grp_exp_24_16_s_fu_335_ap_ready == 1'b1)) begin
            ap_reg_grp_exp_24_16_s_fu_335_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_exp_24_16_s_fu_344_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state11) & (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))))) begin
            ap_reg_grp_exp_24_16_s_fu_344_ap_start <= 1'b1;
        end else if ((grp_exp_24_16_s_fu_344_ap_ready == 1'b1)) begin
            ap_reg_grp_exp_24_16_s_fu_344_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_exp_24_16_s_fu_353_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state11) & (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))))) begin
            ap_reg_grp_exp_24_16_s_fu_353_ap_start <= 1'b1;
        end else if ((grp_exp_24_16_s_fu_353_ap_ready == 1'b1)) begin
            ap_reg_grp_exp_24_16_s_fu_353_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i5_i_reg_300 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state16) & (exitcond6_i_fu_809_p2 == 1'd0))) begin
        i5_i_reg_300 <= i_fu_815_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond3_i_reg_964 == 1'd0))) begin
        j_i_reg_277 <= j_reg_968;
    end else if (((1'b1 == ap_CS_fsm_state4) & (dst_V_offset_empty_n == 1'b1))) begin
        j_i_reg_277 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        p_Val2_s_reg_288 <= 24'd0;
    end else if (((1'b1 == ap_CS_fsm_state16) & (exitcond6_i_fu_809_p2 == 1'd0))) begin
        p_Val2_s_reg_288 <= Sum_Exp_V_fu_830_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_55_i_fu_836_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        storemerge1_reg_311 <= 16'd256;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        storemerge1_reg_311 <= tmp_37_fu_877_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_55_i_reg_1086 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
        storemerge2_reg_323 <= 16'd256;
    end else if (((1'b1 == ap_CS_fsm_state88) & (tmp_55_i_reg_1086 == 1'd0))) begin
        storemerge2_reg_323 <= tmp_38_fu_898_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_reg_pp0_iter1_exitcond3_i_reg_964 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        sum_V_0_i_reg_267 <= sum_0_V_1_reg_1025;
    end else if (((1'b1 == ap_CS_fsm_state4) & (dst_V_offset_empty_n == 1'b1))) begin
        sum_V_0_i_reg_267 <= sum_0_V_reg_924;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_reg_pp0_iter1_exitcond3_i_reg_964 == 1'd0))) begin
        sum_V_1_i_reg_257 <= sum_1_V_1_reg_1040;
    end else if (((1'b1 == ap_CS_fsm_state4) & (dst_V_offset_empty_n == 1'b1))) begin
        sum_V_1_i_reg_257 <= sum_1_V_reg_934;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_reg_pp0_iter1_exitcond3_i_reg_964 == 1'd0))) begin
        sum_V_2_i_reg_247 <= {{p_Val2_42_2_i_fu_568_p2[27:10]}};
    end else if (((1'b1 == ap_CS_fsm_state4) & (dst_V_offset_empty_n == 1'b1))) begin
        sum_V_2_i_reg_247 <= Bias_V_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        Exp_Out_0_V_reg_1055 <= grp_exp_24_16_s_fu_335_ap_return;
        Exp_Out_1_V_reg_1061 <= grp_exp_24_16_s_fu_344_ap_return;
        Exp_Out_2_V_reg_1067 <= grp_exp_24_16_s_fu_353_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (exitcond3_i_reg_964 == 1'd0))) begin
        OP1_V_i_cast_reg_1009[16 : 0] <= OP1_V_i_cast_fu_487_p1[16 : 0];
        p_Val2_40_i_reg_1015 <= p_Val2_40_i_fu_903_p2;
        tmp_48_1_i_reg_1020[27 : 10] <= tmp_48_1_i_fu_494_p3[27 : 10];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_reg_pp0_iter1_exitcond3_i_reg_964 <= exitcond3_i_reg_964;
        exitcond3_i_reg_964 <= exitcond3_i_fu_415_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (dst_V_offset_empty_n == 1'b1))) begin
        dst_V_addr_1_reg_949 <= tmp_9_cast_fu_399_p1;
        dst_V_addr_2_reg_954 <= tmp_10_cast_fu_410_p1;
        dst_V_addr_reg_944 <= tmp_8_cast_fu_388_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_968 <= j_fu_421_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond3_i_reg_964 == 1'd0))) begin
        p_Val2_40_1_i_reg_1030 <= p_Val2_40_1_i_fu_909_p2;
        tmp_48_2_i_reg_1035[27 : 10] <= tmp_48_2_i_fu_528_p3[27 : 10];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_reg_pp0_iter1_exitcond3_i_reg_964 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        p_Val2_40_2_i_reg_1045 <= p_Val2_40_2_i_fu_914_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond3_i_reg_964 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (exitcond3_i_reg_964 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond3_i_reg_964 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        reg_362 <= weight_V_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond3_i_reg_964 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        src_V_load_reg_994 <= src_V_q0;
        tmp_48_i_reg_999[27 : 10] <= tmp_48_i_fu_469_p3[27 : 10];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond3_i_reg_964 == 1'd0))) begin
        sum_0_V_1_reg_1025 <= {{p_Val2_42_i_fu_508_p2[27:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sum_0_V_reg_924 <= Bias_V_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_reg_pp0_iter1_exitcond3_i_reg_964 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        sum_1_V_1_reg_1040 <= {{p_Val2_42_1_i_fu_542_p2[27:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sum_1_V_reg_934 <= Bias_V_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond3_i_fu_415_p2 == 1'd0))) begin
        tmp_22_reg_973 <= tmp_22_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_55_i_reg_1086 <= tmp_55_i_fu_836_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Bias_V_Addr_A_orig = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Bias_V_Addr_A_orig = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        Bias_V_Addr_A_orig = 64'd0;
    end else begin
        Bias_V_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        Bias_V_EN_A = 1'b1;
    end else begin
        Bias_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond3_i_fu_415_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond3_i_reg_964 == 1'd0))) begin
        ap_phi_mux_j_i_phi_fu_281_p4 = j_reg_968;
    end else begin
        ap_phi_mux_j_i_phi_fu_281_p4 = j_i_reg_277;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) & (tmp_55_i_reg_1086 == 1'd0))) begin
        ap_phi_mux_storemerge2_phi_fu_327_p4 = tmp_38_fu_898_p1;
    end else begin
        ap_phi_mux_storemerge2_phi_fu_327_p4 = storemerge2_reg_323;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_reg_pp0_iter1_exitcond3_i_reg_964 == 1'd0))) begin
        ap_phi_mux_sum_V_0_i_phi_fu_270_p4 = sum_0_V_1_reg_1025;
    end else begin
        ap_phi_mux_sum_V_0_i_phi_fu_270_p4 = sum_V_0_i_reg_267;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_reg_pp0_iter1_exitcond3_i_reg_964 == 1'd0))) begin
        ap_phi_mux_sum_V_1_i_phi_fu_260_p4 = sum_1_V_1_reg_1040;
    end else begin
        ap_phi_mux_sum_V_1_i_phi_fu_260_p4 = sum_V_1_i_reg_257;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        dst_V_address0 = dst_V_addr_2_reg_954;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        dst_V_address0 = dst_V_addr_1_reg_949;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state17))) begin
        dst_V_address0 = dst_V_addr_reg_944;
    end else begin
        dst_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state17))) begin
        dst_V_ce0 = 1'b1;
    end else begin
        dst_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        dst_V_d0 = ap_phi_mux_storemerge2_phi_fu_327_p4;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        dst_V_d0 = storemerge1_reg_311;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        dst_V_d0 = tmp_36_fu_872_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        dst_V_d0 = 16'd256;
    end else begin
        dst_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        dst_V_offset_blk_n = dst_V_offset_empty_n;
    end else begin
        dst_V_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (dst_V_offset_empty_n == 1'b1))) begin
        dst_V_offset_read = 1'b1;
    end else begin
        dst_V_offset_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | ((tmp_55_i_fu_836_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17)))) begin
        dst_V_we0 = 1'b1;
    end else begin
        dst_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (tmp_55_i_fu_836_p2 == 1'd0))) begin
        grp_fu_853_ap_start = 1'b1;
    end else begin
        grp_fu_853_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (tmp_55_i_fu_836_p2 == 1'd0))) begin
        grp_fu_866_ap_start = 1'b1;
    end else begin
        grp_fu_866_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state53) & (tmp_55_i_reg_1086 == 1'd0))) begin
        grp_fu_892_ap_start = 1'b1;
    end else begin
        grp_fu_892_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_V_ce0 = 1'b1;
    end else begin
        src_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            weight_V_Addr_A_orig = tmp_32_cast_fu_482_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            weight_V_Addr_A_orig = tmp_31_cast_fu_464_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            weight_V_Addr_A_orig = tmp_30_cast_fu_454_p1;
        end else begin
            weight_V_Addr_A_orig = 'bx;
        end
    end else begin
        weight_V_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        weight_V_EN_A = 1'b1;
    end else begin
        weight_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (dst_V_offset_empty_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond3_i_fu_415_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond3_i_fu_415_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (exitcond6_i_fu_809_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((tmp_55_i_fu_836_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            if (((tmp_55_i_reg_1086 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Bias_V_Addr_A = Bias_V_Addr_A_orig << 32'd2;

assign Bias_V_Din_A = 32'd0;

assign Bias_V_WEN_A = 4'd0;

assign OP1_V_i_cast_fu_487_p1 = src_V_load_reg_994;

assign Sum_Exp_V_fu_830_p2 = ($signed(p_Val2_11_fu_821_p5) + $signed(p_Val2_s_reg_288));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd84];

assign ap_NS_fsm_state11 = ap_NS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state10_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dst_V_offset_cast_i_s_fu_366_p1 = dst_V_offset_dout;

assign exitcond3_i_fu_415_p2 = ((ap_phi_mux_j_i_phi_fu_281_p4 == 6'd60) ? 1'b1 : 1'b0);

assign exitcond6_i_fu_809_p2 = ((i5_i_reg_300 == 2'd3) ? 1'b1 : 1'b0);

assign grp_exp_24_16_s_fu_335_ap_start = ap_reg_grp_exp_24_16_s_fu_335_ap_start;

assign grp_exp_24_16_s_fu_335_x_V = ((tmp_33_fu_588_p3[0:0] === 1'b1) ? tmp_5_fu_640_p4 : tmp_4_fu_636_p1);

assign grp_exp_24_16_s_fu_344_ap_start = ap_reg_grp_exp_24_16_s_fu_344_ap_start;

assign grp_exp_24_16_s_fu_344_x_V = ((tmp_34_fu_663_p3[0:0] === 1'b1) ? tmp_13_fu_715_p4 : tmp_12_fu_711_p1);

assign grp_exp_24_16_s_fu_353_ap_start = ap_reg_grp_exp_24_16_s_fu_353_ap_start;

assign grp_exp_24_16_s_fu_353_x_V = ((tmp_35_fu_738_p3[0:0] === 1'b1) ? tmp_19_fu_790_p4 : tmp_18_fu_786_p1);

assign grp_fu_853_p0 = {{Exp_Out_0_V_reg_1055}, {8'd0}};

assign grp_fu_853_p1 = tmp_60_i_fu_849_p1;

assign grp_fu_866_p0 = {{Exp_Out_1_V_reg_1061}, {8'd0}};

assign grp_fu_866_p1 = tmp_60_i_fu_849_p1;

assign grp_fu_892_p0 = {{Exp_Out_2_V_reg_1067}, {8'd0}};

assign i_fu_815_p2 = (i5_i_reg_300 + 2'd1);

assign j_fu_421_p2 = (ap_phi_mux_j_i_phi_fu_281_p4 + 6'd1);

assign p_Val2_40_1_i_fu_909_p0 = OP1_V_i_cast_reg_1009;

assign p_Val2_40_2_i_fu_914_p0 = OP1_V_i_cast_reg_1009;

assign p_Val2_40_i_fu_903_p0 = p_Val2_40_i_fu_903_p00;

assign p_Val2_40_i_fu_903_p00 = src_V_load_reg_994;

assign p_Val2_42_1_i_fu_542_p2 = (tmp_48_1_cast4_i_cas_fu_539_p1 + tmp_465_1_i_cast_fu_536_p1);

assign p_Val2_42_2_i_fu_568_p2 = (tmp_48_2_cast6_i_cas_fu_565_p1 + tmp_465_2_i_cast_fu_562_p1);

assign p_Val2_42_i_fu_508_p2 = (tmp_48_cast2_i_cast_fu_505_p1 + tmp_465_i_cast_fu_502_p1);

assign p_lshr_1_cast_i_fu_687_p1 = tmp_7_fu_677_p4;

assign p_lshr_2_cast_i_fu_762_p1 = tmp_15_fu_752_p4;

assign p_lshr_cast_i_fu_612_p1 = tmp_1_fu_602_p4;

assign p_neg_1_i_fu_671_p2 = ($signed(19'd0) - $signed(tmp_40_tr_1_i_fu_659_p1));

assign p_neg_2_i_fu_746_p2 = ($signed(19'd0) - $signed(tmp_40_tr_2_i_fu_734_p1));

assign p_neg_i_fu_596_p2 = ($signed(19'd0) - $signed(tmp_40_tr_i_fu_584_p1));

assign p_neg_t_1_i_fu_691_p2 = (16'd0 - p_lshr_1_cast_i_fu_687_p1);

assign p_neg_t_2_i_fu_766_p2 = (16'd0 - p_lshr_2_cast_i_fu_762_p1);

assign p_neg_t_i_fu_616_p2 = (16'd0 - p_lshr_cast_i_fu_612_p1);

assign p_shl3_cast_fu_444_p1 = tmp_21_fu_436_p3;

assign p_shl_cast_fu_378_p1 = tmp_fu_370_p3;

assign src_V_address0 = tmp_i_fu_427_p1;

assign tmp_10_cast_fu_410_p1 = $signed(tmp_s_fu_404_p2);

assign tmp_10_fu_697_p4 = {{sum_V_1_i_reg_257[17:6]}};

assign tmp_11_fu_707_p1 = $signed(tmp_10_fu_697_p4);

assign tmp_12_fu_711_p1 = $unsigned(tmp_11_fu_707_p1);

assign tmp_13_fu_715_p4 = {{p_neg_t_1_i_fu_691_p2[15:2]}};

assign tmp_15_fu_752_p4 = {{p_neg_2_i_fu_746_p2[18:4]}};

assign tmp_16_fu_772_p4 = {{sum_V_2_i_reg_247[17:6]}};

assign tmp_17_fu_782_p1 = $signed(tmp_16_fu_772_p4);

assign tmp_18_fu_786_p1 = $unsigned(tmp_17_fu_782_p1);

assign tmp_19_fu_790_p4 = {{p_neg_t_2_i_fu_766_p2[15:2]}};

assign tmp_1_fu_602_p4 = {{p_neg_i_fu_596_p2[18:4]}};

assign tmp_21_fu_436_p3 = {{ap_phi_mux_j_i_phi_fu_281_p4}, {2'd0}};

assign tmp_22_fu_448_p2 = (p_shl3_cast_fu_444_p1 - tmp_i_cast_fu_432_p1);

assign tmp_23_fu_459_p2 = (tmp_22_reg_973 + 9'd1);

assign tmp_24_fu_477_p2 = (tmp_22_reg_973 + 9'd2);

assign tmp_2_fu_622_p4 = {{sum_V_0_i_reg_267[17:6]}};

assign tmp_30_cast_fu_454_p1 = $signed(tmp_22_fu_448_p2);

assign tmp_31_cast_fu_464_p1 = $signed(tmp_23_fu_459_p2);

assign tmp_32_cast_fu_482_p1 = $signed(tmp_24_fu_477_p2);

assign tmp_33_fu_588_p3 = sum_V_0_i_reg_267[32'd17];

assign tmp_34_fu_663_p3 = sum_V_1_i_reg_257[32'd17];

assign tmp_35_fu_738_p3 = sum_V_2_i_reg_247[32'd17];

assign tmp_36_fu_872_p1 = grp_fu_853_p2[15:0];

assign tmp_37_fu_877_p1 = grp_fu_866_p2[15:0];

assign tmp_38_fu_898_p1 = grp_fu_892_p2[15:0];

assign tmp_3_fu_632_p1 = $signed(tmp_2_fu_622_p4);

assign tmp_40_tr_1_i_fu_659_p1 = $signed(sum_V_1_i_reg_257);

assign tmp_40_tr_2_i_fu_734_p1 = $signed(sum_V_2_i_reg_247);

assign tmp_40_tr_i_fu_584_p1 = $signed(sum_V_0_i_reg_267);

assign tmp_465_1_i_cast_fu_536_p1 = $unsigned(p_Val2_40_1_i_reg_1030);

assign tmp_465_2_i_cast_fu_562_p1 = $unsigned(p_Val2_40_2_i_reg_1045);

assign tmp_465_i_cast_fu_502_p1 = $unsigned(p_Val2_40_i_reg_1015);

assign tmp_48_1_cast4_i_cas_fu_539_p1 = tmp_48_1_i_reg_1020;

assign tmp_48_1_i_fu_494_p3 = {{ap_phi_mux_sum_V_1_i_phi_fu_260_p4}, {10'd0}};

assign tmp_48_2_cast6_i_cas_fu_565_p1 = tmp_48_2_i_reg_1035;

assign tmp_48_2_i_fu_528_p3 = {{sum_V_2_i_reg_247}, {10'd0}};

assign tmp_48_cast2_i_cast_fu_505_p1 = tmp_48_i_reg_999;

assign tmp_48_i_fu_469_p3 = {{ap_phi_mux_sum_V_0_i_phi_fu_270_p4}, {10'd0}};

assign tmp_4_fu_636_p1 = $unsigned(tmp_3_fu_632_p1);

assign tmp_55_i_fu_836_p2 = ((p_Val2_s_reg_288 == 24'd0) ? 1'b1 : 1'b0);

assign tmp_5_fu_640_p4 = {{p_neg_t_i_fu_616_p2[15:2]}};

assign tmp_60_i_fu_849_p1 = p_Val2_s_reg_288;

assign tmp_7_fu_677_p4 = {{p_neg_1_i_fu_671_p2[18:4]}};

assign tmp_8_cast_fu_388_p1 = $signed(tmp_8_fu_382_p2);

assign tmp_8_fu_382_p2 = (p_shl_cast_fu_378_p1 - dst_V_offset_cast_i_s_fu_366_p1);

assign tmp_9_cast_fu_399_p1 = $signed(tmp_9_fu_393_p2);

assign tmp_9_fu_393_p2 = (tmp_8_fu_382_p2 + 11'd1);

assign tmp_fu_370_p3 = {{dst_V_offset_dout}, {2'd0}};

assign tmp_i_cast_fu_432_p1 = ap_phi_mux_j_i_phi_fu_281_p4;

assign tmp_i_fu_427_p1 = ap_phi_mux_j_i_phi_fu_281_p4;

assign tmp_s_fu_404_p2 = (tmp_8_fu_382_p2 + 11'd2);

assign weight_V_Addr_A = weight_V_Addr_A_orig << 32'd2;

assign weight_V_Din_A = 32'd0;

assign weight_V_WEN_A = 4'd0;

always @ (posedge ap_clk) begin
    tmp_48_i_reg_999[9:0] <= 10'b0000000000;
    OP1_V_i_cast_reg_1009[34:17] <= 18'b000000000000000000;
    tmp_48_1_i_reg_1020[9:0] <= 10'b0000000000;
    tmp_48_2_i_reg_1035[9:0] <= 10'b0000000000;
end

endmodule //Layer4_Dense
