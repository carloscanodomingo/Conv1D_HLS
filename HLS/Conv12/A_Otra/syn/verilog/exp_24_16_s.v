// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module exp_24_16_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_V,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [13:0] x_V;
output  [23:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [7:0] f_x_msb_2_table_address0;
reg    f_x_msb_2_table_ce0;
wire   [45:0] f_x_msb_2_table_q0;
wire   [7:0] exp_x_msb_1_table32_address0;
reg    exp_x_msb_1_table32_ce0;
wire   [49:0] exp_x_msb_1_table32_q0;
reg   [13:0] x_V_read_reg_385;
reg   [13:0] ap_reg_pp0_iter1_x_V_read_reg_385;
reg   [13:0] ap_reg_pp0_iter2_x_V_read_reg_385;
reg   [13:0] ap_reg_pp0_iter3_x_V_read_reg_385;
wire   [0:0] tmp_fu_112_p3;
reg   [0:0] tmp_reg_390;
reg   [0:0] ap_reg_pp0_iter1_tmp_reg_390;
reg   [0:0] ap_reg_pp0_iter2_tmp_reg_390;
reg   [0:0] ap_reg_pp0_iter3_tmp_reg_390;
wire   [7:0] loc_V_fu_142_p3;
reg   [7:0] loc_V_reg_396;
wire   [8:0] r_V_3_fu_177_p2;
reg   [8:0] r_V_3_reg_411;
wire   [40:0] tmp_9_fu_183_p1;
reg   [40:0] tmp_9_reg_416;
reg   [49:0] p_Val2_8_reg_421;
reg   [49:0] ap_reg_pp0_iter2_p_Val2_8_reg_421;
reg   [49:0] ap_reg_pp0_iter3_p_Val2_8_reg_421;
reg   [47:0] p_Val2_7_reg_437;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] tmp_s_fu_150_p1;
wire   [63:0] tmp_3_fu_155_p1;
wire   [6:0] p_Result_s_fu_120_p4;
wire   [4:0] tmp_7_fu_138_p1;
wire   [7:0] p_Result_s_25_fu_130_p3;
wire   [4:0] loc_V_1_fu_160_p4;
wire   [8:0] tmp_2_fu_174_p1;
wire   [8:0] tmp_1_fu_170_p1;
wire   [49:0] p_Result_1_fu_187_p3;
wire   [49:0] grp_fu_200_p0;
wire   [49:0] grp_fu_200_p1;
wire   [99:0] grp_fu_200_p2;
wire   [0:0] tmp_4_fu_216_p3;
wire   [49:0] tmp_5_fu_235_p1;
wire   [49:0] p_Val2_9_fu_238_p2;
wire   [0:0] not_s_fu_223_p2;
wire   [45:0] p_cast_cast_cast_fu_228_p3;
wire   [45:0] y_V_fu_243_p4;
wire   [45:0] p_Val2_10_fu_253_p3;
wire   [0:0] tmp_10_fu_261_p3;
wire   [0:0] tmp_11_fu_269_p3;
wire   [0:0] tmp_12_fu_277_p3;
wire   [0:0] tmp_13_fu_285_p3;
wire   [0:0] tmp5_fu_331_p2;
wire   [0:0] tmp4_fu_325_p2;
wire   [0:0] tmp_14_fu_293_p3;
wire   [0:0] tmp_15_fu_301_p3;
wire   [0:0] tmp_16_fu_309_p3;
wire   [0:0] tmp_17_fu_317_p3;
wire   [0:0] tmp8_fu_349_p2;
wire   [0:0] tmp7_fu_343_p2;
wire   [0:0] tmp6_fu_355_p2;
wire   [0:0] tmp3_fu_337_p2;
wire   [0:0] tmp_8_fu_361_p2;
wire   [23:0] tmp_6_fu_367_p4;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to3;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [99:0] grp_fu_200_p00;
wire   [99:0] grp_fu_200_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

exp_24_16_s_f_x_mdEe #(
    .DataWidth( 46 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
f_x_msb_2_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(f_x_msb_2_table_address0),
    .ce0(f_x_msb_2_table_ce0),
    .q0(f_x_msb_2_table_q0)
);

exp_24_16_s_exp_xeOg #(
    .DataWidth( 50 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
exp_x_msb_1_table32_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_x_msb_1_table32_address0),
    .ce0(exp_x_msb_1_table32_ce0),
    .q0(exp_x_msb_1_table32_q0)
);

MASTER_CNN_mul_50fYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 50 ),
    .din1_WIDTH( 50 ),
    .dout_WIDTH( 100 ))
MASTER_CNN_mul_50fYi_U604(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_200_p0),
    .din1(grp_fu_200_p1),
    .ce(1'b1),
    .dout(grp_fu_200_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_tmp_reg_390 <= tmp_reg_390;
        ap_reg_pp0_iter1_x_V_read_reg_385 <= x_V_read_reg_385;
        loc_V_reg_396[7 : 3] <= loc_V_fu_142_p3[7 : 3];
        p_Val2_8_reg_421 <= exp_x_msb_1_table32_q0;
        r_V_3_reg_411 <= r_V_3_fu_177_p2;
        tmp_9_reg_416 <= tmp_9_fu_183_p1;
        tmp_reg_390 <= x_V[32'd13];
        x_V_read_reg_385 <= x_V;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter2_p_Val2_8_reg_421 <= p_Val2_8_reg_421;
        ap_reg_pp0_iter2_tmp_reg_390 <= ap_reg_pp0_iter1_tmp_reg_390;
        ap_reg_pp0_iter2_x_V_read_reg_385 <= ap_reg_pp0_iter1_x_V_read_reg_385;
        ap_reg_pp0_iter3_p_Val2_8_reg_421 <= ap_reg_pp0_iter2_p_Val2_8_reg_421;
        ap_reg_pp0_iter3_tmp_reg_390 <= ap_reg_pp0_iter2_tmp_reg_390;
        ap_reg_pp0_iter3_x_V_read_reg_385 <= ap_reg_pp0_iter2_x_V_read_reg_385;
        p_Val2_7_reg_437 <= {{grp_fu_200_p2[99:52]}};
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to3 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_x_msb_1_table32_ce0 = 1'b1;
    end else begin
        exp_x_msb_1_table32_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        f_x_msb_2_table_ce0 = 1'b1;
    end else begin
        f_x_msb_2_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((tmp_8_fu_361_p2[0:0] === 1'b1) ? 24'd8388607 : tmp_6_fu_367_p4);

assign exp_x_msb_1_table32_address0 = tmp_3_fu_155_p1;

assign f_x_msb_2_table_address0 = tmp_s_fu_150_p1;

assign grp_fu_200_p0 = grp_fu_200_p00;

assign grp_fu_200_p00 = p_Result_1_fu_187_p3;

assign grp_fu_200_p1 = grp_fu_200_p10;

assign grp_fu_200_p10 = p_Val2_8_reg_421;

assign loc_V_1_fu_160_p4 = {{f_x_msb_2_table_q0[45:41]}};

assign loc_V_fu_142_p3 = {{tmp_7_fu_138_p1}, {3'd0}};

assign not_s_fu_223_p2 = (tmp_4_fu_216_p3 ^ ap_reg_pp0_iter3_tmp_reg_390);

assign p_Result_1_fu_187_p3 = {{r_V_3_reg_411}, {tmp_9_reg_416}};

assign p_Result_s_25_fu_130_p3 = {{tmp_fu_112_p3}, {p_Result_s_fu_120_p4}};

assign p_Result_s_fu_120_p4 = {{x_V[11:5]}};

assign p_Val2_10_fu_253_p3 = ((not_s_fu_223_p2[0:0] === 1'b1) ? p_cast_cast_cast_fu_228_p3 : y_V_fu_243_p4);

assign p_Val2_9_fu_238_p2 = (ap_reg_pp0_iter3_p_Val2_8_reg_421 + tmp_5_fu_235_p1);

assign p_cast_cast_cast_fu_228_p3 = ((ap_reg_pp0_iter3_tmp_reg_390[0:0] === 1'b1) ? 46'd0 : 46'd35184372088831);

assign r_V_3_fu_177_p2 = (tmp_2_fu_174_p1 + tmp_1_fu_170_p1);

assign tmp3_fu_337_p2 = (tmp5_fu_331_p2 | tmp4_fu_325_p2);

assign tmp4_fu_325_p2 = (tmp_11_fu_269_p3 | tmp_10_fu_261_p3);

assign tmp5_fu_331_p2 = (tmp_13_fu_285_p3 | tmp_12_fu_277_p3);

assign tmp6_fu_355_p2 = (tmp8_fu_349_p2 | tmp7_fu_343_p2);

assign tmp7_fu_343_p2 = (tmp_15_fu_301_p3 | tmp_14_fu_293_p3);

assign tmp8_fu_349_p2 = (tmp_17_fu_317_p3 | tmp_16_fu_309_p3);

assign tmp_10_fu_261_p3 = p_Val2_10_fu_253_p3[32'd45];

assign tmp_11_fu_269_p3 = p_Val2_10_fu_253_p3[32'd44];

assign tmp_12_fu_277_p3 = p_Val2_10_fu_253_p3[32'd43];

assign tmp_13_fu_285_p3 = p_Val2_10_fu_253_p3[32'd42];

assign tmp_14_fu_293_p3 = p_Val2_10_fu_253_p3[32'd41];

assign tmp_15_fu_301_p3 = p_Val2_10_fu_253_p3[32'd40];

assign tmp_16_fu_309_p3 = p_Val2_10_fu_253_p3[32'd39];

assign tmp_17_fu_317_p3 = p_Val2_10_fu_253_p3[32'd38];

assign tmp_1_fu_170_p1 = loc_V_1_fu_160_p4;

assign tmp_2_fu_174_p1 = loc_V_reg_396;

assign tmp_3_fu_155_p1 = p_Result_s_25_fu_130_p3;

assign tmp_4_fu_216_p3 = ap_reg_pp0_iter3_x_V_read_reg_385[32'd12];

assign tmp_5_fu_235_p1 = p_Val2_7_reg_437;

assign tmp_6_fu_367_p4 = {{p_Val2_10_fu_253_p3[38:15]}};

assign tmp_7_fu_138_p1 = x_V[4:0];

assign tmp_8_fu_361_p2 = (tmp6_fu_355_p2 | tmp3_fu_337_p2);

assign tmp_9_fu_183_p1 = f_x_msb_2_table_q0[40:0];

assign tmp_fu_112_p3 = x_V[32'd13];

assign tmp_s_fu_150_p1 = loc_V_fu_142_p3;

assign y_V_fu_243_p4 = {{p_Val2_9_fu_238_p2[49:4]}};

always @ (posedge ap_clk) begin
    loc_V_reg_396[2:0] <= 3'b000;
end

endmodule //exp_24_16_s
