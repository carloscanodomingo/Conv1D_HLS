// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XMASTER_CNN_H
#define XMASTER_CNN_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xmaster_cnn_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Bus_a_BaseAddress;
} XMaster_cnn_Config;
#endif

typedef struct {
    u32 Bus_a_BaseAddress;
    u32 IsReady;
} XMaster_cnn;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XMaster_cnn_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XMaster_cnn_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XMaster_cnn_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XMaster_cnn_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XMaster_cnn_Initialize(XMaster_cnn *InstancePtr, u16 DeviceId);
XMaster_cnn_Config* XMaster_cnn_LookupConfig(u16 DeviceId);
int XMaster_cnn_CfgInitialize(XMaster_cnn *InstancePtr, XMaster_cnn_Config *ConfigPtr);
#else
int XMaster_cnn_Initialize(XMaster_cnn *InstancePtr, const char* InstanceName);
int XMaster_cnn_Release(XMaster_cnn *InstancePtr);
#endif

void XMaster_cnn_Start(XMaster_cnn *InstancePtr);
u32 XMaster_cnn_IsDone(XMaster_cnn *InstancePtr);
u32 XMaster_cnn_IsIdle(XMaster_cnn *InstancePtr);
u32 XMaster_cnn_IsReady(XMaster_cnn *InstancePtr);
void XMaster_cnn_EnableAutoRestart(XMaster_cnn *InstancePtr);
void XMaster_cnn_DisableAutoRestart(XMaster_cnn *InstancePtr);

void XMaster_cnn_Set_Config_rep(XMaster_cnn *InstancePtr, u32 Data);
u32 XMaster_cnn_Get_Config_rep(XMaster_cnn *InstancePtr);
u32 XMaster_cnn_Get_src_V_BaseAddress(XMaster_cnn *InstancePtr);
u32 XMaster_cnn_Get_src_V_HighAddress(XMaster_cnn *InstancePtr);
u32 XMaster_cnn_Get_src_V_TotalBytes(XMaster_cnn *InstancePtr);
u32 XMaster_cnn_Get_src_V_BitWidth(XMaster_cnn *InstancePtr);
u32 XMaster_cnn_Get_src_V_Depth(XMaster_cnn *InstancePtr);
u32 XMaster_cnn_Write_src_V_Words(XMaster_cnn *InstancePtr, int offset, int *data, int length);
u32 XMaster_cnn_Read_src_V_Words(XMaster_cnn *InstancePtr, int offset, int *data, int length);
u32 XMaster_cnn_Write_src_V_Bytes(XMaster_cnn *InstancePtr, int offset, char *data, int length);
u32 XMaster_cnn_Read_src_V_Bytes(XMaster_cnn *InstancePtr, int offset, char *data, int length);
u32 XMaster_cnn_Get_dst_V_BaseAddress(XMaster_cnn *InstancePtr);
u32 XMaster_cnn_Get_dst_V_HighAddress(XMaster_cnn *InstancePtr);
u32 XMaster_cnn_Get_dst_V_TotalBytes(XMaster_cnn *InstancePtr);
u32 XMaster_cnn_Get_dst_V_BitWidth(XMaster_cnn *InstancePtr);
u32 XMaster_cnn_Get_dst_V_Depth(XMaster_cnn *InstancePtr);
u32 XMaster_cnn_Write_dst_V_Words(XMaster_cnn *InstancePtr, int offset, int *data, int length);
u32 XMaster_cnn_Read_dst_V_Words(XMaster_cnn *InstancePtr, int offset, int *data, int length);
u32 XMaster_cnn_Write_dst_V_Bytes(XMaster_cnn *InstancePtr, int offset, char *data, int length);
u32 XMaster_cnn_Read_dst_V_Bytes(XMaster_cnn *InstancePtr, int offset, char *data, int length);

void XMaster_cnn_InterruptGlobalEnable(XMaster_cnn *InstancePtr);
void XMaster_cnn_InterruptGlobalDisable(XMaster_cnn *InstancePtr);
void XMaster_cnn_InterruptEnable(XMaster_cnn *InstancePtr, u32 Mask);
void XMaster_cnn_InterruptDisable(XMaster_cnn *InstancePtr, u32 Mask);
void XMaster_cnn_InterruptClear(XMaster_cnn *InstancePtr, u32 Mask);
u32 XMaster_cnn_InterruptGetEnabled(XMaster_cnn *InstancePtr);
u32 XMaster_cnn_InterruptGetStatus(XMaster_cnn *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
