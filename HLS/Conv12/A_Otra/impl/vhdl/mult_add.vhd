-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mult_add is
port (
    ap_ready : OUT STD_LOGIC;
    in_V : IN STD_LOGIC_VECTOR (17 downto 0);
    weight_V : IN STD_LOGIC_VECTOR (17 downto 0);
    add_V : IN STD_LOGIC_VECTOR (17 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of mult_add is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal grp_fu_71_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_71_p2 : STD_LOGIC_VECTOR (27 downto 0);

    component MASTER_CNN_mac_mubkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;



begin
    MASTER_CNN_mac_mubkb_U18 : component MASTER_CNN_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        din0 => in_V,
        din1 => weight_V,
        din2 => grp_fu_71_p2,
        dout => grp_fu_71_p3);




    ap_ready <= ap_const_logic_1;
    ap_return <= grp_fu_71_p3(27 downto 10);
    grp_fu_71_p2 <= (add_V & ap_const_lv10_0);
end behav;
