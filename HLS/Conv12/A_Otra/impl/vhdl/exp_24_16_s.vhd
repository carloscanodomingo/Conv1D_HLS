-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity exp_24_16_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (13 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of exp_24_16_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv46_0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000000";
    constant ap_const_lv46_1FFFFFFFFFFF : STD_LOGIC_VECTOR (45 downto 0) := "0111111111111111111111111111111111111111111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv24_7FFFFF : STD_LOGIC_VECTOR (23 downto 0) := "011111111111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal f_x_msb_2_table_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_x_msb_2_table_ce0 : STD_LOGIC;
    signal f_x_msb_2_table_q0 : STD_LOGIC_VECTOR (45 downto 0);
    signal exp_x_msb_1_table32_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal exp_x_msb_1_table32_ce0 : STD_LOGIC;
    signal exp_x_msb_1_table32_q0 : STD_LOGIC_VECTOR (49 downto 0);
    signal x_V_read_reg_385 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_reg_pp0_iter1_x_V_read_reg_385 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_reg_pp0_iter2_x_V_read_reg_385 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_reg_pp0_iter3_x_V_read_reg_385 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_fu_112_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_390 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_reg_390 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_reg_390 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_tmp_reg_390 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_fu_142_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_reg_396 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_3_fu_177_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_3_reg_411 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_fu_183_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_9_reg_416 : STD_LOGIC_VECTOR (40 downto 0);
    signal p_Val2_8_reg_421 : STD_LOGIC_VECTOR (49 downto 0);
    signal ap_reg_pp0_iter2_p_Val2_8_reg_421 : STD_LOGIC_VECTOR (49 downto 0);
    signal ap_reg_pp0_iter3_p_Val2_8_reg_421 : STD_LOGIC_VECTOR (49 downto 0);
    signal p_Val2_7_reg_437 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_s_fu_150_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_155_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_120_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_138_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_s_25_fu_130_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_1_fu_160_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_174_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_fu_170_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_1_fu_187_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_200_p0 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_200_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_200_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal tmp_4_fu_216_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_235_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal p_Val2_9_fu_238_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal not_s_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_cast_cast_fu_228_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal y_V_fu_243_p4 : STD_LOGIC_VECTOR (45 downto 0);
    signal p_Val2_10_fu_253_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_10_fu_261_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_269_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_277_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_285_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_293_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_301_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_309_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_317_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp7_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_367_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_200_p00 : STD_LOGIC_VECTOR (99 downto 0);
    signal grp_fu_200_p10 : STD_LOGIC_VECTOR (99 downto 0);

    component MASTER_CNN_mul_50fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (49 downto 0);
        din1 : IN STD_LOGIC_VECTOR (49 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component exp_24_16_s_f_x_mdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component exp_24_16_s_exp_xeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (49 downto 0) );
    end component;



begin
    f_x_msb_2_table_U : component exp_24_16_s_f_x_mdEe
    generic map (
        DataWidth => 46,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_2_table_address0,
        ce0 => f_x_msb_2_table_ce0,
        q0 => f_x_msb_2_table_q0);

    exp_x_msb_1_table32_U : component exp_24_16_s_exp_xeOg
    generic map (
        DataWidth => 50,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_x_msb_1_table32_address0,
        ce0 => exp_x_msb_1_table32_ce0,
        q0 => exp_x_msb_1_table32_q0);

    MASTER_CNN_mul_50fYi_U604 : component MASTER_CNN_mul_50fYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 50,
        din1_WIDTH => 50,
        dout_WIDTH => 100)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_200_p0,
        din1 => grp_fu_200_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_200_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_tmp_reg_390 <= tmp_reg_390;
                ap_reg_pp0_iter1_x_V_read_reg_385 <= x_V_read_reg_385;
                    loc_V_reg_396(7 downto 3) <= loc_V_fu_142_p3(7 downto 3);
                p_Val2_8_reg_421 <= exp_x_msb_1_table32_q0;
                r_V_3_reg_411 <= r_V_3_fu_177_p2;
                tmp_9_reg_416 <= tmp_9_fu_183_p1;
                tmp_reg_390 <= x_V(13 downto 13);
                x_V_read_reg_385 <= x_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_reg_pp0_iter2_p_Val2_8_reg_421 <= p_Val2_8_reg_421;
                ap_reg_pp0_iter2_tmp_reg_390 <= ap_reg_pp0_iter1_tmp_reg_390;
                ap_reg_pp0_iter2_x_V_read_reg_385 <= ap_reg_pp0_iter1_x_V_read_reg_385;
                ap_reg_pp0_iter3_p_Val2_8_reg_421 <= ap_reg_pp0_iter2_p_Val2_8_reg_421;
                ap_reg_pp0_iter3_tmp_reg_390 <= ap_reg_pp0_iter2_tmp_reg_390;
                ap_reg_pp0_iter3_x_V_read_reg_385 <= ap_reg_pp0_iter2_x_V_read_reg_385;
                p_Val2_7_reg_437 <= grp_fu_200_p2(99 downto 52);
            end if;
        end if;
    end process;
    loc_V_reg_396(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to3)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to3 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv24_7FFFFF when (tmp_8_fu_361_p2(0) = '1') else 
        tmp_6_fu_367_p4;
    exp_x_msb_1_table32_address0 <= tmp_3_fu_155_p1(8 - 1 downto 0);

    exp_x_msb_1_table32_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_x_msb_1_table32_ce0 <= ap_const_logic_1;
        else 
            exp_x_msb_1_table32_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_2_table_address0 <= tmp_s_fu_150_p1(8 - 1 downto 0);

    f_x_msb_2_table_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f_x_msb_2_table_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_2_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_200_p0 <= grp_fu_200_p00(50 - 1 downto 0);
    grp_fu_200_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_fu_187_p3),100));
    grp_fu_200_p1 <= grp_fu_200_p10(50 - 1 downto 0);
    grp_fu_200_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_8_reg_421),100));
    loc_V_1_fu_160_p4 <= f_x_msb_2_table_q0(45 downto 41);
    loc_V_fu_142_p3 <= (tmp_7_fu_138_p1 & ap_const_lv3_0);
    not_s_fu_223_p2 <= (tmp_4_fu_216_p3 xor ap_reg_pp0_iter3_tmp_reg_390);
    p_Result_1_fu_187_p3 <= (r_V_3_reg_411 & tmp_9_reg_416);
    p_Result_s_25_fu_130_p3 <= (tmp_fu_112_p3 & p_Result_s_fu_120_p4);
    p_Result_s_fu_120_p4 <= x_V(11 downto 5);
    p_Val2_10_fu_253_p3 <= 
        p_cast_cast_cast_fu_228_p3 when (not_s_fu_223_p2(0) = '1') else 
        y_V_fu_243_p4;
    p_Val2_9_fu_238_p2 <= std_logic_vector(unsigned(ap_reg_pp0_iter3_p_Val2_8_reg_421) + unsigned(tmp_5_fu_235_p1));
    p_cast_cast_cast_fu_228_p3 <= 
        ap_const_lv46_0 when (ap_reg_pp0_iter3_tmp_reg_390(0) = '1') else 
        ap_const_lv46_1FFFFFFFFFFF;
    r_V_3_fu_177_p2 <= std_logic_vector(unsigned(tmp_2_fu_174_p1) + unsigned(tmp_1_fu_170_p1));
    tmp3_fu_337_p2 <= (tmp5_fu_331_p2 or tmp4_fu_325_p2);
    tmp4_fu_325_p2 <= (tmp_11_fu_269_p3 or tmp_10_fu_261_p3);
    tmp5_fu_331_p2 <= (tmp_13_fu_285_p3 or tmp_12_fu_277_p3);
    tmp6_fu_355_p2 <= (tmp8_fu_349_p2 or tmp7_fu_343_p2);
    tmp7_fu_343_p2 <= (tmp_15_fu_301_p3 or tmp_14_fu_293_p3);
    tmp8_fu_349_p2 <= (tmp_17_fu_317_p3 or tmp_16_fu_309_p3);
    tmp_10_fu_261_p3 <= p_Val2_10_fu_253_p3(45 downto 45);
    tmp_11_fu_269_p3 <= p_Val2_10_fu_253_p3(44 downto 44);
    tmp_12_fu_277_p3 <= p_Val2_10_fu_253_p3(43 downto 43);
    tmp_13_fu_285_p3 <= p_Val2_10_fu_253_p3(42 downto 42);
    tmp_14_fu_293_p3 <= p_Val2_10_fu_253_p3(41 downto 41);
    tmp_15_fu_301_p3 <= p_Val2_10_fu_253_p3(40 downto 40);
    tmp_16_fu_309_p3 <= p_Val2_10_fu_253_p3(39 downto 39);
    tmp_17_fu_317_p3 <= p_Val2_10_fu_253_p3(38 downto 38);
    tmp_1_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_1_fu_160_p4),9));
    tmp_2_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_reg_396),9));
    tmp_3_fu_155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_25_fu_130_p3),64));
    tmp_4_fu_216_p3 <= ap_reg_pp0_iter3_x_V_read_reg_385(12 downto 12);
    tmp_5_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_7_reg_437),50));
    tmp_6_fu_367_p4 <= p_Val2_10_fu_253_p3(38 downto 15);
    tmp_7_fu_138_p1 <= x_V(5 - 1 downto 0);
    tmp_8_fu_361_p2 <= (tmp6_fu_355_p2 or tmp3_fu_337_p2);
    tmp_9_fu_183_p1 <= f_x_msb_2_table_q0(41 - 1 downto 0);
    tmp_fu_112_p3 <= x_V(13 downto 13);
    tmp_s_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_fu_142_p3),64));
    y_V_fu_243_p4 <= p_Val2_9_fu_238_p2(49 downto 4);
end behav;
